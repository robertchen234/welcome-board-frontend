{"version":3,"sources":["components/Ruby_Logo.png","components/Ruby_On_Rails_Logo.png","components/javascript-logo.png","components/react-logo-1000-transparent.png","components/redux_logo.png","components/postit_note.png","components/NavBar.js","containers/ModsContainer.js","components/MainPage.js","components/EditPostForm.js","components/PostIt.js","components/NewPostForm.js","components/ModShowPage.js","components/EditProfileForm.js","components/LoginForm.js","components/SignUpForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","className","react","Link","to","this","props","currentPath","isUserLoggedIn","onClick","logout","Component","ModsContainer","Grid","Row","columns","Column","alt","src","require","React","MainPage","id","containers_ModsContainer","EditPostForm","state","input","_this","post","content","changeHandler","e","setState","target","value","handleSubmit","preventDefault","editPostHandler","onSubmit","cols","rows","maxLength","placeholder","onChange","author","type","PostIt","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","markedForDeletion","likes","_this2","fetch","then","resp","json","postLikes","filter","like","post_id","length","undefined","users","find","user","user_id","full_name","localStorage","getItem","deleteHandler","bind","components_EditPostForm","likesHandler","method","headers","Content-Type","Accept","Authorization","body","JSON","stringify","currentUser","concat","res","console","log","NewPostForm","handleChange","addPost","mod","ModShowPage","mod_posts","mod_id","showPostArray","posts","postArray","reverse","map","key","components_PostIt","show","display","loggedInUser","style","components_NewPostForm","EditProfileForm","password","submitHandler","assertThisInitialized","htmlFor","name","getMods","Redirect","mods","rank","updateHandler","reset","event","defineProperty","LoginForm","loginFullName","loginPassword","submitLoginHandler","Route","path","render","SignUpForm","submitSignUpHandler","App","addNewPost","parseInt","alert","token","data","newArr","toConsumableArray","push","userInfo","createUser","history","setItem","jwt","getUser","status","Error","catch","error","removeItem","current_mod","Action","_this3","components_NavBar","location","pathname","Switch","component","RouterProps","components_ModShowPage","match","params","components_EditProfileForm","components_LoginForm","components_SignUpForm","_this4","withRouter","Boolean","window","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kMCuDzBC,mLAlDX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,QAASH,UAAU,QAA7B,iBAG4B,UAA3BI,KAAKC,MAAMC,YAA0B,KACpCT,EAAAC,EAAAC,cAACE,EAAA,SAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,QAA9B,SAGAH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,QAA9B,SAGAH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,QAA9B,SAGAH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,QAA9B,SAGAH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,QAA9B,WAMLI,KAAKC,MAAME,eACVV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,eAAgBH,UAAU,QAApC,gBAGAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeQ,QAASJ,KAAKC,MAAMI,QAAnD,WAKFZ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBACdH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,QAA9B,SAGAH,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,UAAWH,UAAU,QAA/B,mBA1CSU,sBC2ENC,mLAxEX,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAACa,EAAA,EAAKC,IAAN,CAAUC,QAAS,GACjBjB,EAAAC,EAAAC,cAACa,EAAA,EAAKG,OAAN,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,YAC5BH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVgB,IAAI,GACJC,IAAKC,EAAQ,UAKrBrB,EAAAC,EAAAC,cAACa,EAAA,EAAKG,OAAN,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,YAC5BH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVgB,IAAI,GACJC,IAAKC,EAAQ,UAKrBrB,EAAAC,EAAAC,cAACa,EAAA,EAAKG,OAAN,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,YAC5BH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVgB,IAAI,GACJC,IAAKC,EAAQ,WAOvBrB,EAAAC,EAAAC,cAACa,EAAA,EAAKC,IAAN,CAAUC,QAAS,GACjBjB,EAAAC,EAAAC,cAACa,EAAA,EAAKG,OAAN,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,YAC5BH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVgB,IAAI,GACJC,IAAKC,EAAQ,UAKrBrB,EAAAC,EAAAC,cAACa,EAAA,EAAKG,OAAN,KACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAMC,GAAI,SAAUH,UAAU,YAC5BH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVgB,IAAI,GACJC,IAAKC,EAAQ,mBA/DHC,IAAMT,WCkBnBU,EAnBE,SAAAf,GACf,OACER,EAAAC,EAAAC,cAAA,WACG,IACDF,EAAAC,EAAAC,cAAA,MAAIsB,GAAG,WACLxB,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAACuB,EAAD,mCC4BSC,6MA1CbC,MAAQ,CACNC,MAAOC,EAAKrB,MAAMsB,KAAKC,WAGzBC,cAAgB,SAAAC,GACdJ,EAAKK,SAAS,CAAEN,MAAOK,EAAEE,OAAOC,WAGlCC,aAAe,SAAAJ,GACbA,EAAEK,iBACFT,EAAKrB,MAAM+B,gBAAgBV,EAAKrB,MAAMsB,KAAKN,GAAIK,EAAKF,MAAMC,gFAI1D,OACE5B,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,cAAcrB,UAAU,MAC9BH,EAAAC,EAAAC,cAAA,QAAMsC,SAAUjC,KAAK8B,cACnBrC,EAAAC,EAAAC,cAAA,YACEsB,GAAG,eACHiB,KAAK,KACLC,KAAK,IACLC,UAAU,MACVC,YAAY,YACZR,MAAO7B,KAAKoB,MAAMC,MAClBiB,SAAUtC,KAAKyB,gBAEjBhC,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,KAA4BI,KAAKC,MAAMsC,SAEzC9C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACEsB,GAAG,gBACHrB,UAAU,UACV4C,KAAK,SACLX,MAAM,oBAnCSvB,aCqIZmC,cAnIb,SAAAA,EAAYxC,GAAO,IAAAqB,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAA1C,KAAAyC,IACjBnB,EAAAoB,OAAAE,EAAA,EAAAF,CAAA1C,KAAA0C,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA9C,KAAMC,KA0GR+B,gBAAkB,SAAAN,GAChBA,EAAEK,iBACFT,EAAKrB,MAAM+B,mBA1GXV,EAAKF,MAAQ,CACX2B,mBAAmB,EACnBC,MAAO,GACPT,OAAQ,IANOjB,mFAUC,IAAA2B,EAAAjD,KAClBkD,MAAM,4DACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAH,GACJ,IAAMM,EAAYN,EAAMO,OACtB,SAAAC,GAAI,OAAIA,EAAKC,UAAYR,EAAKhD,MAAMsB,KAAKN,KACzCyC,OACFT,EAAKtB,SAAS,CAAEqB,MAAOM,MAK3B,IAAMf,OAEJoB,IADA3D,KAAKC,MAAM2D,MAAMC,KAAK,SAAAC,GAAI,OAAIA,EAAK7C,KAAOgC,EAAKhD,MAAMsB,KAAKwC,UAEtD,GACA/D,KAAKC,MAAM2D,MAAMC,KAAK,SAAAC,GAAI,OAAIA,EAAK7C,KAAOgC,EAAKhD,MAAMsB,KAAKwC,UACvDC,UACThE,KAAK2B,SAAS,CACZY,OAAQA,qFAsBV,OACE9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKiB,IAAI,GAAGC,IAAKC,EAAQ,OACzBrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZI,KAAKC,MAAMsB,KAAKwC,SAAWE,aAAaC,QAAQ,MAC/CzE,EAAAC,EAAAC,cAAA,QACEC,UAAU,iBACVQ,QAASJ,KAAKmE,cAAcC,KAAKpE,OAFnC,KAME,KAEHA,KAAKC,MAAMsB,KAAKwC,SAAWE,aAAaC,QAAQ,MAC/CzE,EAAAC,EAAAC,cAAC0E,EAAD,CACE9C,KAAMvB,KAAKC,MAAMsB,KACjBS,gBAAiBhC,KAAKC,MAAM+B,gBAC5BO,OAAQvC,KAAKoB,MAAMmB,SAGrB9C,EAAAC,EAAAC,cAAA,SACGK,KAAKC,MAAMsB,KAAKC,QAAS,IAC1B/B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,UAAhB,KAA4BI,KAAKoB,MAAMmB,SAG3C9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,YAAOK,KAAKoB,MAAM4B,MAAlB,KACAvD,EAAAC,EAAAC,cAAA,QACEC,UAAWI,KAAKC,MAAME,eAAiB,UAAY,GACnDC,QACEJ,KAAKC,MAAME,eAAiBH,KAAKsE,aAAaF,KAAKpE,MAAQ,MAH/D,0DAeRkD,MAAM,2DAA4D,CAChEqB,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,OAAQ,mBACRC,cAAeV,aAAaC,QAAQ,UAEtCU,KAAMC,KAAKC,UAAU,CACnBrB,QAASzD,KAAKC,MAAMsB,KAAKN,GACzB8C,QAAS/D,KAAKC,MAAM8E,YAAY9D,OAEjCkC,KAAKnD,KAAK2B,SAAS,CAAEqB,MAAOhD,KAAKoB,MAAM4B,MAAQ,6CAUlDE,MAAK,4DAAA8B,OAEDhF,KAAKC,MAAMsB,KAAKN,IAElB,CACEsD,OAAQ,SACRC,QAAS,CACPG,cAAeV,aAAaC,QAAQ,YAIvCf,KAAK,SAAA8B,GAAG,OAAIA,EAAI5B,SAChBF,KAAK+B,QAAQC,KAChBnF,KAAKC,MAAMkE,cAAcnE,KAAKC,MAAMsB,KAAKN,WAhIxBF,IAAMT,WCyCZ8E,6MAzCbhE,MAAQ,CACNC,MAAO,MAGTgE,aAAe,SAAA3D,GACbJ,EAAKK,SAAS,CAAEN,MAAOK,EAAEE,OAAOC,WAGlCC,aAAe,SAAAJ,GACbA,EAAEK,iBACFT,EAAKrB,MAAMqF,QAAQhE,EAAKF,MAAMC,MAAOC,EAAKrB,MAAMsF,KAChDjE,EAAKK,SAAS,CACZN,MAAO,8EAMT,OACE5B,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,gBAAgBrB,UAAU,gBAChCH,EAAAC,EAAAC,cAAA,QAAMsC,SAAUjC,KAAK8B,cAArB,kCAEErC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YACEC,UAAU,eACV4C,KAAK,OACLH,YAAY,aACZH,KAAK,MACLC,KAAK,IACLC,UAAU,MACVP,MAAO7B,KAAKoB,MAAMC,MAClBiB,SAAUtC,KAAKqF,eAEjB5F,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,wBAAwB4C,KAAK,oBAnC9BlC,aCqDXkF,6MAlDbpE,MAAQ,CACNqE,UAAWnE,EAAKrB,MAAMyF,UAGxBC,cAAgB,WACd,IAAIC,EAAQtE,EAAKrB,MAAM4F,UACpBtC,OAAO,SAAAhC,GACN,OAAOA,EAAKmE,QAAUpE,EAAKrB,MAAMyF,SAElCI,UAEH,OACErG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZgG,EAAMG,IAAI,SAAAxE,GACT,OACE9B,EAAAC,EAAAC,cAAA,OAAKqG,IAAKzE,EAAKN,GAAIrB,UAAU,mBAC3BH,EAAAC,EAAAC,cAACsG,EAAD,CACE1E,KAAMA,EACNwD,YAAazD,EAAKrB,MAAM8E,YACxBZ,cAAe7C,EAAKrB,MAAMkE,cAC1BnC,gBAAiBV,EAAKrB,MAAM+B,gBAC5BgB,MAAO1B,EAAKrB,MAAM+C,MAClB7C,eAAgBmB,EAAKrB,MAAME,eAC3ByD,MAAOtC,EAAKrB,MAAM2D,qFAU9B,IAAMsC,EAAO,CAAEC,QAASnG,KAAKC,MAAMmG,aAAe,QAAU,QAC5D,OACE3G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAd,OAAAoF,OAAiChF,KAAKC,MAAMyF,SAC5CjG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBI,KAAK2F,iBACtClG,EAAAC,EAAAC,cAAA,OAAK0G,MAAOH,GACVzG,EAAAC,EAAAC,cAAC2G,EAAD,CACEhB,QAAStF,KAAKC,MAAMqF,QACpBC,IAAKvF,KAAKC,MAAMyF,OAChBX,YAAa/E,KAAKC,MAAM8E,uBA3CVzE,8BC8EXiG,cA9Eb,SAAAA,EAAYtG,GAAO,IAAAqB,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAA1C,KAAAuG,IACjBjF,EAAAoB,OAAAE,EAAA,EAAAF,CAAA1C,KAAA0C,OAAAG,EAAA,EAAAH,CAAA6D,GAAAzD,KAAA9C,KAAMC,KAEDmB,MAAQ,CACXH,GAAIK,EAAKrB,MAAM8E,YAAY9D,GAC3B+C,UAAW1C,EAAKrB,MAAM8E,YAAYf,UAClCwC,SAAU,GACVd,OAAQpE,EAAKrB,MAAM8E,YAAYW,QAGjCpE,EAAKmF,cAAgBnF,EAAKmF,cAAcrC,KAAnB1B,OAAAgE,EAAA,EAAAhE,QAAAgE,EAAA,EAAAhE,CAAApB,KACrBA,EAAKG,cAAgBH,EAAKG,cAAc2C,KAAnB1B,OAAAgE,EAAA,EAAAhE,QAAAgE,EAAA,EAAAhE,CAAApB,KAXJA,wEAejB,OACE7B,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,oBAAoBrB,UAAU,gBACnCI,KAAKC,MAAME,eACVV,EAAAC,EAAAC,cAAA,QAAMsC,SAAUjC,KAAKyG,eACnBhH,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,aAAf,eACAlH,EAAAC,EAAAC,cAAA,SACE6C,KAAK,OACLoE,KAAK,YACLtE,SAAUtC,KAAKyB,cACfI,MAAO7B,KAAKoB,MAAM4C,YAEpBvE,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,YAAf,cACAlH,EAAAC,EAAAC,cAAA,SACE6C,KAAK,WACLoE,KAAK,WACLvE,YAAY,oBACZpB,GAAG,WACHY,MAAO7B,KAAKoB,MAAMoF,SAClBlE,SAAUtC,KAAKyB,gBAEjBhC,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,OAAf,WACAlH,EAAAC,EAAAC,cAAA,UACEiH,KAAK,SACL3F,GAAG,SACHqB,SAAUtC,KAAKyB,cACfI,MAAO7B,KAAKoB,MAAMsE,QAEjB1F,KAAK6G,WAERpH,EAAAC,EAAAC,cAAA,SACE6C,KAAK,SACL5C,UAAU,wBACViC,MAAM,YAIVpC,EAAAC,EAAAC,cAACmH,EAAA,EAAD,CAAU/G,GAAG,8CAOnB,OAAOC,KAAKC,MAAM8G,KAAKhB,IAAI,SAAAR,GAAG,OAC5B9F,EAAAC,EAAAC,cAAA,UAAQqG,IAAKT,EAAItE,GAAIY,MAAO0D,EAAItE,IAC7BsE,EAAIyB,8CAKGtF,GACZA,EAAEK,iBACF/B,KAAKC,MAAMgH,cAAcjH,KAAKoB,OAC9BM,EAAEE,OAAOsF,8CAGGC,GACZnH,KAAK2B,SAALe,OAAA0E,EAAA,EAAA1E,CAAA,GACGyE,EAAMvF,OAAOgF,KAAOO,EAAMvF,OAAOC,eA1EVvB,aCqEf+G,6MApEbjG,MAAQ,CACNkG,cAAe,GACfC,cAAe,MAGjB9F,cAAgB,SAAA0F,GACd7F,EAAKK,SAALe,OAAA0E,EAAA,EAAA1E,CAAA,GACGyE,EAAMvF,OAAOgF,KAAOO,EAAMvF,OAAOC,WAItC2F,mBAAqB,SAAAL,GACnBA,EAAMpF,iBAENT,EAAKrB,MAAMuH,mBAAmBlG,EAAKF,MAAO+F,GAC1C7F,EAAKK,SAAS,CACZ2F,cAAe,GACfC,cAAe,8EAIV,IAAAtE,EAAAjD,KACP,OACEP,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,aAAarB,UAAU,gBAC7BH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CACEC,KAAK,SACLC,OAAQ,WACN,OACElI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMsC,SAAUgB,EAAKuE,oBACnB/H,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,aAAf,cACAlH,EAAAC,EAAAC,cAAA,SACEsB,GAAG,YACHrB,UAAU,eACVgH,KAAK,gBACLpE,KAAK,OACLH,YAAY,uBACZR,MAAOoB,EAAK7B,MAAMkG,cAClBhF,SAAUW,EAAKxB,gBAEjBhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,YAAf,aACAlH,EAAAC,EAAAC,cAAA,SACEsB,GAAG,WACHrB,UAAU,eACVgH,KAAK,gBACLpE,KAAK,WACLH,YAAY,mBACZR,MAAOoB,EAAK7B,MAAMmG,cAClBjF,SAAUW,EAAKxB,gBAEjBhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SACE6C,KAAK,SACL5C,UAAU,wBACViC,MAAM,wBAzDFvB,aCiFTsH,6MAhFbxG,MAAQ,CACN4C,UAAW,GACXwC,SAAU,GACVd,OAAQ,KAGVjE,cAAgB,SAAA0F,GACd7F,EAAKK,SAALe,OAAA0E,EAAA,EAAA1E,CAAA,GACGyE,EAAMvF,OAAOgF,KAAOO,EAAMvF,OAAOC,WAItCgG,oBAAsB,SAAAV,GACpBA,EAAMpF,iBAENT,EAAKrB,MAAM4H,oBAAoBvG,EAAKF,MAAO+F,GAC3C7F,EAAKK,SAAS,CACZqC,UAAW,GACXwC,SAAU,GACVd,OAAQ,6EAIH,IAAAzC,EAAAjD,KACP,OACEP,EAAAC,EAAAC,cAAA,OAAKsB,GAAG,cAAcrB,UAAU,gBAC9BH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CACEC,KAAK,UACLC,OAAQ,WACN,OACElI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMsC,SAAUgB,EAAK4E,qBACnBpI,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,aAAf,cACAlH,EAAAC,EAAAC,cAAA,SACEsB,GAAG,YACHrB,UAAU,eACVgH,KAAK,YACLpE,KAAK,OACLH,YAAY,uBACZR,MAAOoB,EAAK7B,MAAM4C,UAClB1B,SAAUW,EAAKxB,gBAEjBhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,YAAf,aACAlH,EAAAC,EAAAC,cAAA,SACEsB,GAAG,WACHrB,UAAU,eACVgH,KAAK,WACLpE,KAAK,WACLH,YAAY,mBACZR,MAAOoB,EAAK7B,MAAMoF,SAClBlE,SAAUW,EAAKxB,gBAEjBhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOgH,QAAQ,OAAf,QACAlH,EAAAC,EAAAC,cAAA,UACEsB,GAAG,MACHrB,UAAU,eACVgH,KAAK,SACL/E,MAAOoB,EAAK7B,MAAMsE,OAClBpD,SAAUW,EAAKxB,eAEfhC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,KAAd,KACApC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,KAAd,KACApC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,KAAd,KACApC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,KAAd,KACApC,EAAAC,EAAAC,cAAA,UAAQkC,MAAM,KAAd,MAEFpC,EAAAC,EAAAC,cAAA,SAAO6C,KAAK,SAAS5C,UAAU,gBAAgBiC,MAAM,wBAtE9CvB,aCQnBwH,cACJ,SAAAA,EAAY7H,GAAO,IAAAqB,EAAA,OAAAoB,OAAAC,EAAA,EAAAD,CAAA1C,KAAA8H,IACjBxG,EAAAoB,OAAAE,EAAA,EAAAF,CAAA1C,KAAA0C,OAAAG,EAAA,EAAAH,CAAAoF,GAAAhF,KAAA9C,KAAMC,KAkIR8H,WAAa,SAAC1G,EAAOkE,GACnB,GAAIyC,SAASzC,GAAOjE,EAAKF,MAAM2D,YAAYW,OACzCuC,MAAM,wEACD,CACOhE,aAAaC,QAAQ,SACjChB,MAAM,2DAA4D,CAChEqB,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,OAAQ,mBACRC,cAAerD,EAAKF,MAAM8G,OAE5BtD,KAAMC,KAAKC,UAAU,CACnBtD,QAASH,EACTqE,OAAQsC,SAASzC,GACjBxB,QAASzC,EAAKF,MAAM2D,YAAY9D,OAGjCkC,KAAK,SAAA8B,GAAG,OAAIA,EAAI5B,SAChBF,KAAK,SAAAgF,GACJ,IAAIC,EAAM1F,OAAA2F,EAAA,EAAA3F,CAAOpB,EAAKF,MAAMwE,OAC5BwC,EAAOE,KAAKH,GACZ7G,EAAKK,SAAS,CAAEiE,MAAOwC,QAzJZ9G,EAgMnBuG,oBAAsB,SAACU,EAAUpB,GAC/BA,EAAMpF,iBACNT,EAAKkH,WAAWD,GAChBjH,EAAKrB,MAAMwI,QAAQH,KAAK,UAnMPhH,EAsMnBkH,WAAa,SAAAD,GACXrD,QAAQC,IAAI,WAAYoD,GACxBrF,MAAM,2DAA4D,CAChEqB,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,OAAQ,oBAEVE,KAAMC,KAAKC,UAAU,CACnBd,UAAWuE,EAASvE,UACpBwC,SAAU+B,EAAS/B,SACnBd,OAAQ6C,EAAS7C,WAGlBvC,KAAK,SAAA8B,GAAG,OAAIA,EAAI5B,SAChBF,KAAK,SAAA8B,GACJhB,aAAayE,QAAQ,QAASzD,EAAI0D,KAClCrH,EAAKK,SAAS,CACZxB,gBAAgB,EAChB+H,MAAOjE,aAAaC,QAAQ,SAC5Ba,YAAa,CACX9D,GAAIgE,EAAInB,KAAK7C,GACb+C,UAAWiB,EAAInB,KAAKE,UACpBwC,SAAU,GACVd,OAAQT,EAAInB,KAAK4B,aA9NRpE,EAoOnBkG,mBAAqB,SAACe,EAAUpB,GAC9BA,EAAMpF,iBACNT,EAAKsH,QAAQL,GACbjH,EAAKrB,MAAMwI,QAAQH,KAAK,UAvOPhH,EA0OnBsH,QAAU,SAAAL,GACRrF,MAAM,2DAA4D,CAChEqB,OAAQ,OACRC,QAAS,CACPC,eAAgB,mBAChBC,OAAQ,oBAEVE,KAAMC,KAAKC,UAAU,CACnBd,UAAWuE,EAASjB,cACpBd,SAAU+B,EAAShB,kBAGpBpE,KAAK,SAAA8B,GACJ,GAAmB,MAAfA,EAAI4D,OAAgB,MAAM,IAAIC,MAAM7D,EAAI4D,QACvC,OAAO5D,EAAI5B,SAEjBF,KAAK,SAAA8B,GACJhB,aAAayE,QAAQ,QAASzD,EAAI0D,KAClC1E,aAAayE,QAAQ,YAAazD,EAAInB,KAAKE,WAC3CC,aAAayE,QAAQ,KAAMzD,EAAInB,KAAK7C,IACpCgD,aAAayE,QAAQ,SAAUzD,EAAInB,KAAK4B,QACxCpE,EAAKK,SAAS,CACZxB,gBAAgB,EAChB+H,MAAOjE,aAAaC,QAAQ,SAC5Ba,YAAa,CACX9D,GAAIgE,EAAInB,KAAK7C,GACb+C,UAAWiB,EAAInB,KAAKE,UACpBwC,SAAU,GACVd,OAAQT,EAAInB,KAAK4B,YAItBqD,MAAM,SAAAC,GACL1H,EAAKrB,MAAMwI,QAAQH,KAAK,UACxBL,MAAK,eAAAjD,OAAgBgE,EAAhB,sCA5QQ1H,EAgRnBjB,OAAS,WAEP4D,aAAagF,WAAW,SACxBhF,aAAagF,WAAW,MACxBhF,aAAagF,WAAW,aACxBhF,aAAagF,WAAW,UAExB3H,EAAKK,SAAS,CACZoD,YAAa,CACX9D,GAAI,EACJ+C,UAAW,GACX0B,OAAQ,GAEVvF,gBAAgB,EAChB+H,MAAO,KAGT5G,EAAKrB,MAAMwI,QAAQH,KAAK,UAjSPhH,EAySnBU,gBAAkB,SAACf,EAAIO,GACrB0D,QAAQC,IAAIlE,EAAIO,GAChB0B,MAAK,4DAAA8B,OAA6D/D,GAAM,CACtEsD,OAAQ,QACRC,QAAS,CACPC,eAAgB,mBAChBC,OAAQ,mBACRC,cAAerD,EAAKF,MAAM8G,OAE5BtD,KAAMC,KAAKC,UAAU,CACnBtD,cAGD2B,KAAK,SAAA8B,GAAG,OAAIA,EAAI5B,SAChBF,KAAK,SAAAgF,GACJ,IAAIC,EAAM1F,OAAA2F,EAAA,EAAA3F,CAAOpB,EAAKF,MAAMwE,OAC5BwC,EAASA,EAAOrC,IAAI,SAAAxE,GAClB,OAAIA,EAAKN,KAAOA,EACPkH,EAEA5G,IAGXD,EAAKK,SAAS,CAAEiE,MAAOwC,OA7T3B9G,EAAKF,MAAQ,CACXjB,gBAAgB,EAChB+I,YAAa,EAEbnE,YAAa,CACX9D,GAAI,EACJ+C,UAAW,GAEX0B,OAAQ,GAEVqB,KAAM,GACNnB,MAAO,GACPhC,MAAO,GACPZ,MAAO,GACPkF,MAAO,IAGT5G,EAAK2F,cAAgB3F,EAAK2F,cAAc7C,KAAnB1B,OAAAgE,EAAA,EAAAhE,QAAAgE,EAAA,EAAAhE,CAAApB,KApBJA,mFAuBC,IAAA2B,EAAAjD,KAkBlB,GAjBAkD,MAAM,2DACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAA4D,GAAI,OAAI9D,EAAKtB,SAAS,CAAEoF,WAChC7D,MAAM,4DACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAS,GAAK,OAAIX,EAAKtB,SAAS,CAAEiC,YACjCV,MAAM,4DACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAyC,GACJ3C,EAAKtB,SAAS,CAAEiE,YAEpB1C,MAAM,4DACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAH,GACJC,EAAKtB,SAAS,CAAEqB,YAGhBhD,KAAKoB,MAAMjB,eAAgB,CAC7B,IAAI+H,EAAQjE,aAAaC,QAAQ,SACjChB,MAAM,kEAAmE,CACvEqB,OAAQ,MACRC,QAAS,CACPC,eAAgB,mBAChB0E,OAAQ,mBACRxE,cAAa,GAAAK,OAAKkD,MAKpBjE,aAAaP,OAAS,GACxB1D,KAAK2B,SAAS,CACZoD,YAAa,CACX9D,GAAIgD,aAAaC,QAAQ,MACzBF,UAAWC,aAAaC,QAAQ,aAChCwB,OAAQzB,aAAaC,QAAQ,WAE/BgE,MAAOjE,aAAaC,QAAQ,SAC5B/D,gBAAgB,qCAKb,IAAAiJ,EAAApJ,KACP,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0J,EAAD,CACElJ,eAAgBH,KAAKoB,MAAMjB,eAC3BE,OAAQL,KAAKK,OACbH,YAAaF,KAAKC,MAAMqJ,SAASC,WAGnC9J,EAAAC,EAAAC,cAAC6J,EAAA,EAAD,KACE/J,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CAAOC,KAAK,QAAQ+B,UAAWzI,IAC/BvB,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CACEC,KAAK,WACLC,OAAQ,SAAA+B,GACN,OACEjK,EAAAC,EAAAC,cAACgK,EAAD,CACEjE,OAAQgE,EAAYE,MAAMC,OAAO5I,GACjC4E,UAAWuD,EAAKhI,MAAMwE,MACtBN,QAAS8D,EAAKrB,WACd3B,aAAcgD,EAAKhI,MAAMjB,eACzB4E,YAAaqE,EAAKhI,MAAM2D,YACxBZ,cAAeiF,EAAKjF,cAAcC,KAAKgF,GACvCpH,gBAAiBoH,EAAKpH,gBACtBgB,MAAOoG,EAAKhI,MAAM4B,MAClB7C,eAAgBiJ,EAAKhI,MAAMjB,eAC3ByD,MAAOwF,EAAKhI,MAAMwC,WAK1BnE,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CACEC,KAAK,eACLC,OAAQ,WACN,OACElI,EAAAC,EAAAC,cAACmK,EAAD,CACE3J,eAAgBiJ,EAAKhI,MAAMjB,eAC3B4E,YAAaqE,EAAKhI,MAAM2D,YACxBkC,cAAemC,EAAKnC,cACpBF,KAAMqC,EAAKhI,MAAM2F,UAKzBtH,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CACEC,KAAK,SACLC,OAAQ,WACN,OAAOlI,EAAAC,EAAAC,cAACoK,EAAD,CAAWvC,mBAAoB4B,EAAK5B,wBAG/C/H,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CACEC,KAAK,UACLC,OAAQ,WACN,OACElI,EAAAC,EAAAC,cAACqK,EAAD,CAAYnC,oBAAqBuB,EAAKvB,yBAI5CpI,EAAAC,EAAAC,cAAC8H,EAAA,EAAD,CAAOC,KAAK,IAAI+B,UAAWzI,4CAmCrB+D,GAAa,IAAAkF,EAAAjK,KACzBA,KAAK2B,SAAS,CAAEoD,gBAEhB7B,MAAK,4DAAA8B,OAEDD,EAAY9D,IAEd,CACEsD,OAAQ,QACRC,QAAS,CACPC,eAAgB,mBAChBC,OAAQ,mBACRC,cAAe3E,KAAKoB,MAAM8G,OAE5BtD,KAAMC,KAAKC,UAAU,CACnBd,UAAWe,EAAYf,UACvBwC,SAAUzB,EAAYyB,SACtBd,OAAQX,EAAYW,WAIvBvC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAW,GACJmG,EAAKtI,SAAS,CACZoD,YAAa,CACX9D,GAAI6C,EAAK7C,GACT+C,UAAWF,EAAKE,UAChB0B,OAAQ5B,EAAK4B,UAGjBuE,EAAKhK,MAAMwI,QAAQH,KAAK,iDAwGhBrH,GACZ,IAAM2E,EAAQlD,OAAA2F,EAAA,EAAA3F,CAAI1C,KAAKoB,MAAMwE,OAAOrC,OAAO,SAAAhC,GAAI,OAAIA,EAAKN,KAAOA,IAC/DjB,KAAK2B,SAAS,CAAEiE,iBAvSFtF,aAsUH4J,cAAWpC,GCrUNqC,QACW,cAA7BC,OAAOd,SAASe,UAEe,UAA7BD,OAAOd,SAASe,UAEhBD,OAAOd,SAASe,SAAST,MACvB,+ECVNU,IAAS3C,OACPlI,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,KACE9K,EAAAC,EAAAC,cAAC6K,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1H,KAAK,SAAA2H,GACjCA,EAAaC","file":"static/js/main.5ee4fa27.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ruby_Logo.3faf7fef.png\";","module.exports = __webpack_public_path__ + \"static/media/Ruby_On_Rails_Logo.6cb79cc5.png\";","module.exports = __webpack_public_path__ + \"static/media/javascript-logo.80cdee08.png\";","module.exports = __webpack_public_path__ + \"static/media/react-logo-1000-transparent.96656bb8.png\";","module.exports = __webpack_public_path__ + \"static/media/redux_logo.ffca3fad.png\";","module.exports = __webpack_public_path__ + \"static/media/postit_note.15bc09a3.png\";","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <div className=\"ui menu navBar\">\n        <Fragment>\n          <Link to={\"/home\"} className=\"item\">\n            Welcome Board\n          </Link>\n          {this.props.currentPath === \"/home\" ? null : (\n            <Fragment>\n              <Link to={\"/mod/1\"} className=\"item\">\n                Mod 1\n              </Link>\n              <Link to={\"/mod/2\"} className=\"item\">\n                Mod 2\n              </Link>\n              <Link to={\"/mod/3\"} className=\"item\">\n                Mod 3\n              </Link>\n              <Link to={\"/mod/4\"} className=\"item\">\n                Mod 4\n              </Link>\n              <Link to={\"/mod/5\"} className=\"item\">\n                Mod 5\n              </Link>\n            </Fragment>\n          )}\n        </Fragment>\n        {this.props.isUserLoggedIn ? (\n          <span className=\"ui menu navright\">\n            <Link to={\"/editProfile\"} className=\"item\">\n              Edit Profile\n            </Link>\n            <span className=\"item pointer\" onClick={this.props.logout}>\n              Logout\n            </span>\n          </span>\n        ) : (\n          <span className=\"ui menu navright\">\n            <Link to={\"/login\"} className=\"item\">\n              Login\n            </Link>\n            <Link to={\"/signup\"} className=\"item\">\n              SignUp\n            </Link>\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\n\nclass ModsContainer extends React.Component {\n  render() {\n    return (\n      <Grid>\n        <Grid.Row columns={3}>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 1</h1>\n              <Link to={\"/mod/1\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/Ruby_Logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 2</h1>\n              <Link to={\"/mod/2\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/Ruby_On_Rails_Logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 3</h1>\n              <Link to={\"/mod/3\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/javascript-logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row columns={3}>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 4</h1>\n              <Link to={\"/mod/4\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/react-logo-1000-transparent.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 5</h1>\n              <Link to={\"/mod/5\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/redux_logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nexport default ModsContainer;\n","import React from \"react\";\nimport ModsContainer from \"../containers/ModsContainer\";\n\nconst MainPage = props => {\n  return (\n    <div>\n      {\" \"}\n      <h1 id=\"welcome\">\n        <span>W</span>\n        <span>e</span>\n        <span>l</span>\n        <span>c</span>\n        <span>o</span>\n        <span>m</span>\n        <span>e</span>\n        <span>!</span>\n      </h1>\n      <ModsContainer />\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React, { Component } from \"react\";\n\nclass EditPostForm extends Component {\n  state = {\n    input: this.props.post.content\n  };\n\n  changeHandler = e => {\n    this.setState({ input: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.editPostHandler(this.props.post.id, this.state.input);\n  };\n\n  render() {\n    return (\n      <div id=\"postit-form\" className=\"ui\">\n        <form onSubmit={this.handleSubmit}>\n          <textarea\n            id=\"postit-input\"\n            cols=\"30\"\n            rows=\"8\"\n            maxLength=\"140\"\n            placeholder=\"Edit post\"\n            value={this.state.input}\n            onChange={this.changeHandler}\n          />\n          <p>\n            <span className=\"author\">- {this.props.author}</span>\n          </p>\n          <br />\n          <input\n            id=\"postit-submit\"\n            className=\"pointer\"\n            type=\"submit\"\n            value=\"Update\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default EditPostForm;\n","import React from \"react\";\nimport EditPostForm from \"./EditPostForm\";\n\nclass PostIt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markedForDeletion: false,\n      likes: \"\",\n      author: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\")\n      .then(resp => resp.json())\n      .then(likes => {\n        const postLikes = likes.filter(\n          like => like.post_id === this.props.post.id\n        ).length;\n        this.setState({ likes: postLikes });\n      });\n\n    // debugger;\n\n    const author =\n      this.props.users.find(user => user.id === this.props.post.user_id) ===\n      undefined\n        ? \"\"\n        : this.props.users.find(user => user.id === this.props.post.user_id)\n            .full_name;\n    this.setState({\n      author: author\n    });\n  }\n\n  componentWillUnmount() {\n    // come back later to refactor\n    // if (this.markedForDeletion) {\n    //   console.log(\"c will unmount called\");\n    // }\n  }\n\n  // componentDidUpdate(prevProps, prevState){\n  //   if(prevState.likes < this.state.likes){\n  //     fetch('https://welcome-board-backend.herokuapp.com/api/v1/likes', {\n  //       method: \"POST\",\n  //       headers: {'Content-Type': 'application/json', Accept: 'application/json', Authorization: localStorage.getItem(\"token\")},\n  //       body: JSON.stringify({ post_id: this.props.post.id, user_id: this.props.currentUser.id })\n  //     })\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className=\"post-wrapper\">\n        <img alt=\"\" src={require(\"./postit_note.png\")} />\n        <div className=\"post-content\">\n          {this.props.post.user_id == localStorage.getItem(\"id\") ? (\n            <span\n              className=\"delete pointer\"\n              onClick={this.deleteHandler.bind(this)}\n            >\n              x\n            </span>\n          ) : null}\n\n          {this.props.post.user_id == localStorage.getItem(\"id\") ? (\n            <EditPostForm\n              post={this.props.post}\n              editPostHandler={this.props.editPostHandler}\n              author={this.state.author}\n            />\n          ) : (\n            <p>\n              {this.props.post.content}{\" \"}\n              <span className=\"author\">- {this.state.author}</span>\n            </p>\n          )}\n          <div className=\"likes\">\n            <span>{this.state.likes} </span>\n            <span\n              className={this.props.isUserLoggedIn ? \"pointer\" : \"\"}\n              onClick={\n                this.props.isUserLoggedIn ? this.likesHandler.bind(this) : null\n              }\n            >\n              😎\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  likesHandler() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        post_id: this.props.post.id,\n        user_id: this.props.currentUser.id\n      })\n    }).then(this.setState({ likes: this.state.likes + 1 }));\n  }\n\n  editPostHandler = e => {\n    e.preventDefault();\n    this.props.editPostHandler();\n  };\n\n  deleteHandler() {\n    // this.setState({ markedForDeletion: true });\n    fetch(\n      `https://welcome-board-backend.herokuapp.com/api/v1/posts/${\n        this.props.post.id\n      }`,\n      {\n        method: \"DELETE\",\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }\n    )\n      .then(res => res.json())\n      .then(console.log);\n    this.props.deleteHandler(this.props.post.id);\n  }\n}\n\nexport default PostIt;\n","import React, { Component } from \"react\";\n\nclass NewPostForm extends Component {\n  state = {\n    input: \"\",\n  };\n\n  handleChange = e => {\n    this.setState({ input: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.addPost(this.state.input, this.props.mod);\n    this.setState({\n      input: \"\"\n    });\n\n  };\n\n  render() {\n    return (\n      <div id=\"new-post-form\" className=\"ui card form\">\n        <form onSubmit={this.handleSubmit}>\n          Write a note to a previous mod.\n          <br />\n          <textarea\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Enter note\"\n            cols=\"120\"\n            rows=\"8\"\n            maxLength=\"140\"\n            value={this.state.input}\n            onChange={this.handleChange}\n          />\n          <br />\n          <input className=\"submit button pointer\" type=\"submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewPostForm;\n","import React, { Component } from \"react\";\nimport PostIt from \"./PostIt\";\nimport NewPostForm from \"./NewPostForm\";\n\nclass ModShowPage extends Component {\n  state = {\n    mod_posts: this.props.mod_id\n  };\n\n  showPostArray = () => {\n    let posts = this.props.postArray\n      .filter(post => {\n        return post.mod_id == this.props.mod_id;\n      })\n      .reverse();\n\n    return (\n      <div className=\"post-array-container\">\n        {posts.map(post => {\n          return (\n            <div key={post.id} className=\"content-wrapper\">\n              <PostIt\n                post={post}\n                currentUser={this.props.currentUser}\n                deleteHandler={this.props.deleteHandler}\n                editPostHandler={this.props.editPostHandler}\n                likes={this.props.likes}\n                isUserLoggedIn={this.props.isUserLoggedIn}\n                users={this.props.users}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    const show = { display: this.props.loggedInUser ? \"block\" : \"none\" };\n    return (\n      <div className=\"ui\">\n        <h1 className=\"mod-name\">{`Mod ${this.props.mod_id}`}</h1>\n        <div className=\"post-container\">{this.showPostArray()}</div>\n        <div style={show}>\n          <NewPostForm\n            addPost={this.props.addPost}\n            mod={this.props.mod_id}\n            currentUser={this.props.currentUser}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ModShowPage;\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass EditProfileForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: this.props.currentUser.id,\n      full_name: this.props.currentUser.full_name,\n      password: \"\",\n      mod_id: this.props.currentUser.mod_id\n    };\n\n    this.submitHandler = this.submitHandler.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n  }\n\n  render() {\n    return (\n      <div id=\"edit-profile-form\" className=\"ui card form\">\n        {this.props.isUserLoggedIn ? (\n          <form onSubmit={this.submitHandler}>\n            <label htmlFor=\"full_name\">Full Name: </label>\n            <input\n              type=\"text\"\n              name=\"full_name\"\n              onChange={this.changeHandler}\n              value={this.state.full_name}\n            />\n            <label htmlFor=\"password\">Password: </label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"type new password\"\n              id=\"password\"\n              value={this.state.password}\n              onChange={this.changeHandler}\n            />\n            <label htmlFor=\"mod\">Mod #: </label>\n            <select\n              name=\"mod_id\"\n              id=\"mod_id\"\n              onChange={this.changeHandler}\n              value={this.state.mod_id}\n            >\n              {this.getMods()}\n            </select>\n            <input\n              type=\"submit\"\n              className=\"submit button pointer\"\n              value=\"Update\"\n            />\n          </form>\n        ) : (\n          <Redirect to=\"/login\" />\n        )}\n      </div>\n    );\n  }\n\n  getMods() {\n    return this.props.mods.map(mod => (\n      <option key={mod.id} value={mod.id}>\n        {mod.rank}\n      </option>\n    ));\n  }\n\n  submitHandler(e) {\n    e.preventDefault();\n    this.props.updateHandler(this.state);\n    e.target.reset();\n  }\n\n  changeHandler(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n}\n\nexport default EditProfileForm;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nclass LoginForm extends Component {\n  state = {\n    loginFullName: \"\",\n    loginPassword: \"\"\n  };\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  submitLoginHandler = event => {\n    event.preventDefault();\n\n    this.props.submitLoginHandler(this.state, event);\n    this.setState({\n      loginFullName: \"\",\n      loginPassword: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"login-form\" className=\"ui card form\">\n        <h2>Login</h2>\n        <Route\n          path=\"/login\"\n          render={() => {\n            return (\n              <div>\n                <form onSubmit={this.submitLoginHandler}>\n                  <label htmlFor=\"full-name\">Full Name:</label>\n                  <input\n                    id=\"full-name\"\n                    className=\"form-control\"\n                    name=\"loginFullName\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={this.state.loginFullName}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"password\">Password:</label>\n                  <input\n                    id=\"password\"\n                    className=\"form-control\"\n                    name=\"loginPassword\"\n                    type=\"password\"\n                    placeholder=\"Enter a password\"\n                    value={this.state.loginPassword}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <input\n                    type=\"submit\"\n                    className=\"submit button pointer\"\n                    value=\"Submit\"\n                  />\n                </form>\n              </div>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nclass SignUpForm extends Component {\n  state = {\n    full_name: \"\",\n    password: \"\",\n    mod_id: 1\n  };\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  submitSignUpHandler = event => {\n    event.preventDefault();\n\n    this.props.submitSignUpHandler(this.state, event);\n    this.setState({\n      full_name: \"\",\n      password: \"\",\n      mod_id: 1\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"signup-form\" className=\"ui card form\">\n        <h2>Sign Up</h2>\n        <Route\n          path=\"/signup\"\n          render={() => {\n            return (\n              <div>\n                <form onSubmit={this.submitSignUpHandler}>\n                  <label htmlFor=\"full-name\">Full Name:</label>\n                  <input\n                    id=\"full-name\"\n                    className=\"form-control\"\n                    name=\"full_name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={this.state.full_name}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"password\">Password:</label>\n                  <input\n                    id=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter a password\"\n                    value={this.state.password}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"mod\">Mod:</label>\n                  <select\n                    id=\"mod\"\n                    className=\"form-control\"\n                    name=\"mod_id\"\n                    value={this.state.mod_id}\n                    onChange={this.changeHandler}\n                  >\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                  </select>\n                  <input type=\"submit\" className=\"submit button\" value=\"Submit\" />\n                </form>\n              </div>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SignUpForm;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport MainPage from \"./components/MainPage\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport ModShowPage from \"./components/ModShowPage\";\nimport EditProfileForm from \"./components/EditProfileForm\";\nimport LoginForm from \"./components/LoginForm\";\nimport SignUpForm from \"./components/SignUpForm\";\n// import StatsDiv from './components/StatsDiv';          will delay this component for later\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserLoggedIn: false,\n      current_mod: 0,\n      // please do not change the snake case\n      currentUser: {\n        id: 0,\n        full_name: \"\",\n        // password: \"\",\n        mod_id: 0\n      },\n      mods: [],\n      posts: [],\n      users: [],\n      likes: [],\n      token: \"\"\n    };\n\n    this.updateHandler = this.updateHandler.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/mods\")\n      .then(resp => resp.json())\n      .then(mods => this.setState({ mods }));\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/users\")\n      .then(resp => resp.json())\n      .then(users => this.setState({ users }));\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/posts\")\n      .then(resp => resp.json())\n      .then(posts => {\n        this.setState({ posts });\n      });\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\")\n      .then(resp => resp.json())\n      .then(likes => {\n        this.setState({ likes });\n      });\n\n    if (this.state.isUserLoggedIn) {\n      let token = localStorage.getItem(\"token\");\n      fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/current_user\", {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Action: \"application/json\",\n          Authorization: `${token}`\n        }\n      });\n    }\n\n    if (localStorage.length > 0) {\n      this.setState({\n        currentUser: {\n          id: localStorage.getItem(\"id\"),\n          full_name: localStorage.getItem(\"full_name\"),\n          mod_id: localStorage.getItem(\"mod_id\")\n        },\n        token: localStorage.getItem(\"token\"),\n        isUserLoggedIn: true\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          isUserLoggedIn={this.state.isUserLoggedIn}\n          logout={this.logout}\n          currentPath={this.props.location.pathname}\n        />\n\n        <Switch>\n          <Route path=\"/home\" component={MainPage} />\n          <Route\n            path=\"/mod/:id\"\n            render={RouterProps => {\n              return (\n                <ModShowPage\n                  mod_id={RouterProps.match.params.id}\n                  postArray={this.state.posts}\n                  addPost={this.addNewPost}\n                  loggedInUser={this.state.isUserLoggedIn}\n                  currentUser={this.state.currentUser}\n                  deleteHandler={this.deleteHandler.bind(this)}\n                  editPostHandler={this.editPostHandler}\n                  likes={this.state.likes}\n                  isUserLoggedIn={this.state.isUserLoggedIn}\n                  users={this.state.users}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/editProfile\"\n            render={() => {\n              return (\n                <EditProfileForm\n                  isUserLoggedIn={this.state.isUserLoggedIn}\n                  currentUser={this.state.currentUser}\n                  updateHandler={this.updateHandler}\n                  mods={this.state.mods}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/login\"\n            render={() => {\n              return <LoginForm submitLoginHandler={this.submitLoginHandler} />;\n            }}\n          />\n          <Route\n            path=\"/signUp\"\n            render={() => {\n              return (\n                <SignUpForm submitSignUpHandler={this.submitSignUpHandler} />\n              );\n            }}\n          />\n          <Route path=\"/\" component={MainPage} />\n        </Switch>\n\n        {/* {<StatsDiv />} */}\n      </div>\n    );\n  }\n\n  addNewPost = (input, mod) => {\n    if (parseInt(mod) > this.state.currentUser.mod_id) {\n      alert(\"You can only submit posts for mods you are in or have completed.\");\n    } else {\n      let token = localStorage.getItem(\"token\");\n      fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: this.state.token\n        },\n        body: JSON.stringify({\n          content: input,\n          mod_id: parseInt(mod),\n          user_id: this.state.currentUser.id\n        })\n      })\n        .then(res => res.json())\n        .then(data => {\n          let newArr = [...this.state.posts];\n          newArr.push(data);\n          this.setState({ posts: newArr });\n        });\n    }\n  };\n\n  updateHandler(currentUser) {\n    this.setState({ currentUser });\n\n    fetch(\n      `https://welcome-board-backend.herokuapp.com/api/v1/users/${\n        currentUser.id\n      }`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: this.state.token\n        },\n        body: JSON.stringify({\n          full_name: currentUser.full_name,\n          password: currentUser.password,\n          mod_id: currentUser.mod_id\n        })\n      }\n    )\n      .then(resp => resp.json())\n      .then(user => {\n        this.setState({\n          currentUser: {\n            id: user.id,\n            full_name: user.full_name,\n            mod_id: user.mod_id\n          }\n        });\n        this.props.history.push(\"/home\");\n      });\n  }\n\n  submitSignUpHandler = (userInfo, event) => {\n    event.preventDefault();\n    this.createUser(userInfo);\n    this.props.history.push(\"/home\");\n  };\n\n  createUser = userInfo => {\n    console.log(\"userinfo\", userInfo);\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        full_name: userInfo.full_name,\n        password: userInfo.password,\n        mod_id: userInfo.mod_id\n      })\n    })\n      .then(res => res.json())\n      .then(res => {\n        localStorage.setItem(\"token\", res.jwt);\n        this.setState({\n          isUserLoggedIn: true,\n          token: localStorage.getItem(\"token\"),\n          currentUser: {\n            id: res.user.id,\n            full_name: res.user.full_name,\n            password: \"\",\n            mod_id: res.user.mod_id\n          }\n        });\n      });\n  };\n\n  submitLoginHandler = (userInfo, event) => {\n    event.preventDefault();\n    this.getUser(userInfo);\n    this.props.history.push(\"/home\");\n  };\n\n  getUser = userInfo => {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        full_name: userInfo.loginFullName,\n        password: userInfo.loginPassword\n      })\n    })\n      .then(res => {\n        if (res.status === 401) throw new Error(res.status);\n        else return res.json();\n      })\n      .then(res => {\n        localStorage.setItem(\"token\", res.jwt);\n        localStorage.setItem(\"full_name\", res.user.full_name);\n        localStorage.setItem(\"id\", res.user.id);\n        localStorage.setItem(\"mod_id\", res.user.mod_id);\n        this.setState({\n          isUserLoggedIn: true,\n          token: localStorage.getItem(\"token\"),\n          currentUser: {\n            id: res.user.id,\n            full_name: res.user.full_name,\n            password: \"\",\n            mod_id: res.user.mod_id\n          }\n        });\n      })\n      .catch(error => {\n        this.props.history.push(\"/login\");\n        alert(`HTTP ERROR: ${error}, Unknown account or password!`);\n      });\n  };\n\n  logout = () => {\n    //need to remove local storage token\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"id\");\n    localStorage.removeItem(\"full_name\");\n    localStorage.removeItem(\"mod_id\");\n\n    this.setState({\n      currentUser: {\n        id: 0,\n        full_name: \"\",\n        mod_id: 0\n      },\n      isUserLoggedIn: false,\n      token: \"\"\n    });\n\n    this.props.history.push(\"/home\");\n  };\n\n  deleteHandler(id) {\n    const posts = [...this.state.posts].filter(post => post.id !== id);\n    this.setState({ posts });\n  }\n\n  editPostHandler = (id, content) => {\n    console.log(id, content);\n    fetch(`https://welcome-board-backend.herokuapp.com/api/v1/posts/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: this.state.token\n      },\n      body: JSON.stringify({\n        content\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        let newArr = [...this.state.posts];\n        newArr = newArr.map(post => {\n          if (post.id === id) {\n            return data;\n          } else {\n            return post;\n          }\n        });\n        this.setState({ posts: newArr });\n      });\n  };\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}