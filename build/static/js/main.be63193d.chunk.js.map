{"version":3,"sources":["components/Ruby_Logo.png","components/Ruby_On_Rails_Logo.png","components/javascript-logo.png","components/react-logo-1000-transparent.png","components/redux_logo.png","components/postit_note.png","components/NavBar.js","containers/ModsContainer.js","components/MainPage.js","components/EditPostForm.js","components/PostIt.js","components/NewPostForm.js","components/ModShowPage.js","components/EditProfileForm.js","components/LoginForm.js","components/SignUpForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","className","react","Link","to","this","props","currentPath","isUserLoggedIn","onClick","logout","Component","ModsContainer","Grid","Row","columns","Column","alt","src","require","React","MainPage","id","containers_ModsContainer","EditPostForm","state","input","_this","post","content","changeHandler","e","setState","target","value","handleSubmit","preventDefault","editPostHandler","onSubmit","cols","rows","maxLength","placeholder","onChange","author","type","PostIt","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","markedForDeletion","likes","_this2","fetch","then","resp","json","postLikes","filter","like","post_id","length","users","find","user","user_id","full_name","localStorage","getItem","deleteHandler","bind","components_EditPostForm","likesHandler","method","headers","Content-Type","Accept","Authorization","body","JSON","stringify","currentUser","concat","withRouter","NewPostForm","handleChange","addPost","mod","alert","history","push","ModShowPage","mod_posts","mod_id","showPostArray","posts","postArray","reverse","map","key","components_PostIt","show","display","style","components_NewPostForm","EditProfileForm","password","submitHandler","assertThisInitialized","htmlFor","name","getMods","Redirect","mods","rank","updateHandler","reset","event","defineProperty","LoginForm","loginFullName","loginPassword","submitLoginHandler","Route","path","render","SignUpForm","submitSignUpHandler","App","addNewPost","parseInt","res","data","newArr","toConsumableArray","userInfo","createUser","setItem","jwt","token","getUser","status","Error","catch","error","removeItem","current_mod","_this3","components_NavBar","location","pathname","Switch","component","RouterProps","_React$createElement","components_ModShowPage","match","params","parse","components_EditProfileForm","components_LoginForm","components_SignUpForm","_this4","Boolean","window","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.be63193d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ruby_Logo.3faf7fef.png\";","module.exports = __webpack_public_path__ + \"static/media/Ruby_On_Rails_Logo.6cb79cc5.png\";","module.exports = __webpack_public_path__ + \"static/media/javascript-logo.80cdee08.png\";","module.exports = __webpack_public_path__ + \"static/media/react-logo-1000-transparent.96656bb8.png\";","module.exports = __webpack_public_path__ + \"static/media/redux_logo.ffca3fad.png\";","module.exports = __webpack_public_path__ + \"static/media/postit_note.15bc09a3.png\";","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <div className=\"ui menu navBar\">\n        <Fragment>\n          <Link to={\"/home\"} className=\"item\">\n            Welcome Board\n          </Link>\n          {this.props.currentPath === \"/home\" ? null : (\n            <Fragment>\n              <Link to={\"/mod/1\"} className=\"item\">\n                Mod 1\n              </Link>\n              <Link to={\"/mod/2\"} className=\"item\">\n                Mod 2\n              </Link>\n              <Link to={\"/mod/3\"} className=\"item\">\n                Mod 3\n              </Link>\n              <Link to={\"/mod/4\"} className=\"item\">\n                Mod 4\n              </Link>\n              <Link to={\"/mod/5\"} className=\"item\">\n                Mod 5\n              </Link>\n            </Fragment>\n          )}\n        </Fragment>\n        {this.props.isUserLoggedIn ? (\n          <span className=\"ui menu navright\">\n            <Link to={\"/editProfile\"} className=\"item\">\n              Edit Profile\n            </Link>\n            <span className=\"item pointer\" onClick={this.props.logout}>\n              Logout\n            </span>\n          </span>\n        ) : (\n          <span className=\"ui menu navright\">\n            <Link to={\"/login\"} className=\"item\">\n              Login\n            </Link>\n            <Link to={\"/signup\"} className=\"item\">\n              SignUp\n            </Link>\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\n\nclass ModsContainer extends React.Component {\n  render() {\n    return (\n      <Grid>\n        <Grid.Row columns={3}>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 1</h1>\n              <Link to={\"/mod/1\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/Ruby_Logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 2</h1>\n              <Link to={\"/mod/2\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/Ruby_On_Rails_Logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 3</h1>\n              <Link to={\"/mod/3\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/javascript-logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n        </Grid.Row>\n\n        <Grid.Row columns={3}>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 4</h1>\n              <Link to={\"/mod/4\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/react-logo-1000-transparent.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n          <Grid.Column>\n            <div className=\"mod-link-parent\">\n              <h1>Mod 5</h1>\n              <Link to={\"/mod/5\"} className=\"mod-link\">\n                <img\n                  className=\"logo-image\"\n                  alt=\"\"\n                  src={require(\"../components/redux_logo.png\")}\n                />\n              </Link>\n            </div>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n}\n\nexport default ModsContainer;\n","import React from \"react\";\nimport ModsContainer from \"../containers/ModsContainer\";\n\nconst MainPage = props => {\n  return (\n    <div>\n      {\" \"}\n      <h1 id=\"welcome\">\n        <span>W</span>\n        <span>e</span>\n        <span>l</span>\n        <span>c</span>\n        <span>o</span>\n        <span>m</span>\n        <span>e</span>\n        <span>!</span>\n      </h1>\n      <ModsContainer />\n    </div>\n  );\n};\n\nexport default MainPage;\n","import React, { Component } from \"react\";\n\nclass EditPostForm extends Component {\n  state = {\n    input: this.props.post.content\n  };\n\n  changeHandler = e => {\n    this.setState({ input: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.editPostHandler(this.props.post.id, this.state.input);\n  };\n\n  render() {\n    return (\n      <div id=\"postit-form\" className=\"ui\">\n        <form onSubmit={this.handleSubmit}>\n          <textarea\n            id=\"postit-input\"\n            cols=\"30\"\n            rows=\"8\"\n            maxLength=\"140\"\n            placeholder=\"Edit post\"\n            value={this.state.input}\n            onChange={this.changeHandler}\n          />\n          <p>\n            <span className=\"author\">- {this.props.author}</span>\n          </p>\n          <br />\n          <input\n            id=\"postit-submit\"\n            className=\"pointer\"\n            type=\"submit\"\n            value=\"Update\"\n          />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default EditPostForm;\n","import React from \"react\";\nimport EditPostForm from \"./EditPostForm\";\nimport { withRouter } from \"react-router-dom\";\nclass PostIt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markedForDeletion: false,\n      likes: \"\",\n      author: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\")\n      .then(resp => resp.json())\n      .then(likes => {\n        const postLikes = likes.filter(\n          like => like.post_id === this.props.post.id\n        ).length;\n        this.setState({ likes: postLikes });\n      });\n\n    // saving users collection to localStorage if in case of page reload\n    // localStorage.setItem(\"users\", JSON.stringify(this.props.users));\n\n    const author = this.props.users.find(\n      user => user.id === this.props.post.user_id\n    ).full_name;\n    // const author = this.props.users.find(\n    //   user => user.id === this.props.post.user_id\n    // ).full_name;\n\n    // const author =\n    //   this.props.users.find(user => user.id === this.props.post.user_id) ===\n    //   undefined\n    //     ? \"\"\n    //     : this.props.users.find(user => user.id === this.props.post.user_id)\n    //         .full_name;\n\n    this.setState({\n      author\n    });\n  }\n\n  // componentWillUnmount() {\n  //   // come back later to refactor\n  //   // if (this.markedForDeletion) {\n  //   // }\n  // }\n\n  // componentDidUpdate(prevProps, prevState){\n  //   if(prevState.likes < this.state.likes){\n  //     fetch('https://welcome-board-backend.herokuapp.com/api/v1/likes', {\n  //       method: \"POST\",\n  //       headers: {'Content-Type': 'application/json', Accept: 'application/json', Authorization: localStorage.getItem(\"token\")},\n  //       body: JSON.stringify({ post_id: this.props.post.id, user_id: this.props.currentUser.id })\n  //     })\n  //   }\n  // }\n\n  render() {\n    return (\n      <div className=\"post-wrapper\">\n        <img alt=\"\" src={require(\"./postit_note.png\")} />\n        <div className=\"post-content\">\n          {this.props.post.user_id == localStorage.getItem(\"id\") ? (\n            <span\n              className=\"delete pointer\"\n              onClick={this.deleteHandler.bind(this)}\n            >\n              x\n            </span>\n          ) : null}\n\n          {this.props.post.user_id == localStorage.getItem(\"id\") ? (\n            <EditPostForm\n              post={this.props.post}\n              editPostHandler={this.props.editPostHandler}\n              author={this.state.author}\n            />\n          ) : (\n            <p>\n              {this.props.post.content}{\" \"}\n              <span className=\"author\">- {this.state.author}</span>\n            </p>\n          )}\n          <div className=\"likes\">\n            <span>{this.state.likes} </span>\n            <span\n              className={this.props.isUserLoggedIn ? \"pointer\" : \"\"}\n              onClick={\n                this.props.isUserLoggedIn ? this.likesHandler.bind(this) : null\n              }\n            >\n              😎\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  likesHandler() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        post_id: this.props.post.id,\n        user_id: this.props.currentUser.id\n      })\n    }).then(this.setState({ likes: this.state.likes + 1 }));\n  }\n\n  editPostHandler = e => {\n    e.preventDefault();\n    this.props.editPostHandler();\n  };\n\n  deleteHandler() {\n    // this.setState({ markedForDeletion: true });\n    fetch(\n      `https://welcome-board-backend.herokuapp.com/api/v1/posts/${\n        this.props.post.id\n      }`,\n      {\n        method: \"DELETE\",\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }\n    );\n\n    this.props.deleteHandler(this.props.post.id);\n  }\n}\n\nexport default withRouter(PostIt);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass NewPostForm extends Component {\n  state = {\n    input: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({ input: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.input !== \"\") {\n      this.props.addPost(this.state.input, this.props.mod);\n      this.setState({\n        input: \"\"\n      });\n    } else {\n      alert(\"No blank comment please.\");\n      this.props.history.push(`/mod/${this.props.mod}`);\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"new-post-form\" className=\"ui card form\">\n        <form onSubmit={this.handleSubmit}>\n          Write a note to a previous mod.\n          <br />\n          <textarea\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Enter note\"\n            cols=\"120\"\n            rows=\"8\"\n            maxLength=\"140\"\n            value={this.state.input}\n            onChange={this.handleChange}\n          />\n          <br />\n          <input className=\"submit button pointer\" type=\"submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NewPostForm);\n","import React, { Component } from \"react\";\nimport PostIt from \"./PostIt\";\nimport NewPostForm from \"./NewPostForm\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ModShowPage extends Component {\n  state = {\n    mod_posts: this.props.mod_id\n  };\n\n  showPostArray = () => {\n    let posts = this.props.postArray\n      .filter(post => {\n        return post.mod_id == this.props.mod_id;\n      })\n      .reverse();\n\n    return (\n      <div className=\"post-array-container\">\n        {posts.map(post => {\n          return (\n            <div key={post.id} className=\"content-wrapper\">\n              <PostIt\n                post={post}\n                currentUser={this.props.currentUser}\n                deleteHandler={this.props.deleteHandler}\n                editPostHandler={this.props.editPostHandler}\n                likes={this.props.likes}\n                isUserLoggedIn={this.props.isUserLoggedIn}\n                users={this.props.users}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    const show = { display: this.props.isUserLoggedIn ? \"block\" : \"none\" };\n    return (\n      <div className=\"ui\">\n        <h1 className=\"mod-name\">{`Mod ${this.props.mod_id}`}</h1>\n        <div className=\"post-container\">{this.showPostArray()}</div>\n        <div style={show}>\n          <NewPostForm\n            addPost={this.props.addPost}\n            mod={this.props.mod_id}\n            currentUser={this.props.currentUser}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ModShowPage);\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass EditProfileForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: this.props.currentUser.id,\n      full_name: this.props.currentUser.full_name,\n      password: \"\",\n      mod_id: this.props.currentUser.mod_id\n    };\n\n    this.submitHandler = this.submitHandler.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n  }\n\n  render() {\n    return (\n      <div id=\"edit-profile-form\" className=\"ui card form\">\n        {this.props.isUserLoggedIn ? (\n          <form onSubmit={this.submitHandler}>\n            <label htmlFor=\"full_name\">Full Name: </label>\n            <input\n              type=\"text\"\n              name=\"full_name\"\n              onChange={this.changeHandler}\n              value={this.state.full_name}\n            />\n            <label htmlFor=\"password\">Password: </label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"type new password\"\n              id=\"password\"\n              value={this.state.password}\n              onChange={this.changeHandler}\n            />\n            <label htmlFor=\"mod\">Mod #: </label>\n            <select\n              name=\"mod_id\"\n              id=\"mod_id\"\n              onChange={this.changeHandler}\n              value={this.state.mod_id}\n            >\n              {this.getMods()}\n            </select>\n            <input\n              type=\"submit\"\n              className=\"submit button pointer\"\n              value=\"Update\"\n            />\n          </form>\n        ) : (\n          <Redirect to=\"/login\" />\n        )}\n      </div>\n    );\n  }\n\n  getMods() {\n    return this.props.mods.map(mod => (\n      <option key={mod.id} value={mod.id}>\n        {mod.rank}\n      </option>\n    ));\n  }\n\n  submitHandler(e) {\n    e.preventDefault();\n    this.props.updateHandler(this.state);\n    e.target.reset();\n  }\n\n  changeHandler(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n}\n\nexport default EditProfileForm;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nclass LoginForm extends Component {\n  state = {\n    loginFullName: \"\",\n    loginPassword: \"\"\n  };\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  submitLoginHandler = event => {\n    event.preventDefault();\n\n    this.props.submitLoginHandler(this.state, event);\n    this.setState({\n      loginFullName: \"\",\n      loginPassword: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div id=\"login-form\" className=\"ui card form\">\n        <h2>Login</h2>\n        <Route\n          path=\"/login\"\n          render={() => {\n            return (\n              <div>\n                <form onSubmit={this.submitLoginHandler}>\n                  <label htmlFor=\"full-name\">Full Name:</label>\n                  <input\n                    id=\"full-name\"\n                    className=\"form-control\"\n                    name=\"loginFullName\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={this.state.loginFullName}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"password\">Password:</label>\n                  <input\n                    id=\"password\"\n                    className=\"form-control\"\n                    name=\"loginPassword\"\n                    type=\"password\"\n                    placeholder=\"Enter a password\"\n                    value={this.state.loginPassword}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <input\n                    type=\"submit\"\n                    className=\"submit button pointer\"\n                    value=\"Submit\"\n                  />\n                </form>\n              </div>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React, { Component } from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\n\nclass SignUpForm extends Component {\n  state = {\n    full_name: \"\",\n    password: \"\",\n    mod_id: 1\n  };\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  submitSignUpHandler = event => {\n    event.preventDefault();\n\n    if (this.state.full_name !== \"\" || this.state.password !== \"\") {\n      this.props.submitSignUpHandler(this.state, event);\n      this.setState({\n        full_name: \"\",\n        password: \"\",\n        mod_id: 1\n      });\n    } else {\n      alert(\"Full name and password field cannot be empty.\");\n      this.props.history.push(\"/signup\");\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"signup-form\" className=\"ui card form\">\n        <h2>Sign Up</h2>\n        <Route\n          path=\"/signup\"\n          render={() => {\n            return (\n              <div>\n                <form onSubmit={this.submitSignUpHandler}>\n                  <label htmlFor=\"full-name\">Full Name:</label>\n                  <input\n                    id=\"full-name\"\n                    className=\"form-control\"\n                    name=\"full_name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={this.state.full_name}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"password\">Password:</label>\n                  <input\n                    id=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter a password\"\n                    value={this.state.password}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"mod\">Mod:</label>\n                  <select\n                    id=\"mod\"\n                    className=\"form-control\"\n                    name=\"mod_id\"\n                    value={this.state.mod_id}\n                    onChange={this.changeHandler}\n                  >\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                  </select>\n                  <input\n                    type=\"submit\"\n                    className=\"submit button\"\n                    value=\"Submit\"\n                  />\n                </form>\n              </div>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(SignUpForm);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport MainPage from \"./components/MainPage\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport ModShowPage from \"./components/ModShowPage\";\nimport EditProfileForm from \"./components/EditProfileForm\";\nimport LoginForm from \"./components/LoginForm\";\nimport SignUpForm from \"./components/SignUpForm\";\n// import StatsDiv from './components/StatsDiv';          will delay this component for later\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isUserLoggedIn: false,\n      current_mod: 0,\n      // please do not change the snake case\n      currentUser: {\n        id: 0,\n        full_name: \"\",\n        // password: \"\",\n        mod_id: 0\n      },\n      mods: [],\n      posts: [],\n      // users: [],\n      likes: [],\n      token: \"\"\n    };\n\n    this.updateHandler = this.updateHandler.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/mods\")\n      .then(resp => resp.json())\n      .then(mods => this.setState({ mods }));\n\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/users\")\n      .then(resp => resp.json())\n      .then(users => {\n        localStorage.setItem(\"users\", JSON.stringify(users));\n        // this.setState({ users })\n      });\n\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/posts\")\n      .then(resp => resp.json())\n      .then(posts => {\n        this.setState({ posts });\n      });\n\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\")\n      .then(resp => resp.json())\n      .then(likes => {\n        this.setState({ likes });\n      });\n\n    // Commented by Carlo: will comment this block of code because the code is not doing anything and\n    // the state will default back to false if the page is reloaded\n    // which will make the block of code below useless.\n    // if (this.state.isUserLoggedIn) {\n    //   let token = localStorage.getItem(\"token\");\n    //   fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/current_user\", {\n    //     method: \"GET\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       Action: \"application/json\",\n    //       Authorization: `${token}`\n    //     }\n    //   });\n    // }\n\n    if (localStorage.getItem(\"token\") !== null) {\n      this.setState({\n        currentUser: {\n          id: localStorage.getItem(\"id\"),\n          full_name: localStorage.getItem(\"full_name\"),\n          mod_id: localStorage.getItem(\"mod_id\")\n        },\n        token: localStorage.getItem(\"token\"),\n        isUserLoggedIn: true\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          isUserLoggedIn={this.state.isUserLoggedIn}\n          logout={this.logout}\n          currentPath={this.props.location.pathname}\n        />\n\n        <Switch>\n          <Route path=\"/home\" component={MainPage} />\n          <Route\n            path=\"/mod/:id\"\n            render={RouterProps => {\n              return (\n                <ModShowPage\n                  mod_id={RouterProps.match.params.id}\n                  postArray={this.state.posts}\n                  addPost={this.addNewPost}\n                  isUserLoggedIn={this.state.isUserLoggedIn}\n                  currentUser={this.state.currentUser}\n                  deleteHandler={this.deleteHandler.bind(this)}\n                  editPostHandler={this.editPostHandler}\n                  likes={this.state.likes}\n                  isUserLoggedIn={this.state.isUserLoggedIn}\n                  users={JSON.parse(localStorage.getItem(\"users\"))}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/editProfile\"\n            render={() => {\n              return (\n                <EditProfileForm\n                  isUserLoggedIn={this.state.isUserLoggedIn}\n                  currentUser={this.state.currentUser}\n                  updateHandler={this.updateHandler}\n                  mods={this.state.mods}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/login\"\n            render={() => {\n              return <LoginForm submitLoginHandler={this.submitLoginHandler} />;\n            }}\n          />\n          <Route\n            path=\"/signUp\"\n            render={() => {\n              return (\n                <SignUpForm submitSignUpHandler={this.submitSignUpHandler} />\n              );\n            }}\n          />\n          <Route path=\"/\" component={MainPage} />\n        </Switch>\n\n        {/* {<StatsDiv />} */}\n      </div>\n    );\n  }\n\n  addNewPost = (input, mod) => {\n    if (parseInt(mod) > this.state.currentUser.mod_id) {\n      alert(\"You can only submit posts for mods you are in or have completed.\");\n    } else {\n      fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/posts\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify({\n          content: input,\n          mod_id: parseInt(mod),\n          user_id: parseInt(localStorage.getItem(\"id\"))\n        })\n      })\n        .then(res => res.json())\n        .then(data => {\n          let newArr = [...this.state.posts];\n          newArr.push(data);\n          this.setState({ posts: newArr });\n        });\n    }\n  };\n\n  updateHandler(currentUser) {\n    this.setState({ currentUser });\n\n    fetch(\n      `https://welcome-board-backend.herokuapp.com/api/v1/users/${\n        currentUser.id\n      }`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: this.state.token\n        },\n        body: JSON.stringify({\n          full_name: currentUser.full_name,\n          password: currentUser.password,\n          mod_id: currentUser.mod_id\n        })\n      }\n    )\n      .then(resp => resp.json())\n      .then(user => {\n        this.setState({\n          currentUser: {\n            id: user.id,\n            full_name: user.full_name,\n            mod_id: user.mod_id\n          }\n        });\n        this.props.history.push(\"/home\");\n      });\n  }\n\n  submitSignUpHandler = (userInfo, event) => {\n    event.preventDefault();\n    this.createUser(userInfo);\n    this.props.history.push(\"/home\");\n  };\n\n  createUser = userInfo => {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        full_name: userInfo.full_name,\n        password: userInfo.password,\n        mod_id: userInfo.mod_id\n      })\n    })\n      .then(res => res.json())\n      .then(res => {\n        localStorage.setItem(\"token\", res.jwt);\n        this.setState({\n          isUserLoggedIn: true,\n          token: localStorage.getItem(\"token\"),\n          currentUser: {\n            id: res.user.id,\n            full_name: res.user.full_name,\n            password: \"\",\n            mod_id: res.user.mod_id\n          }\n        });\n      });\n  };\n\n  submitLoginHandler = (userInfo, event) => {\n    event.preventDefault();\n    this.getUser(userInfo);\n    this.props.history.push(\"/home\");\n  };\n\n  getUser = userInfo => {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        full_name: userInfo.loginFullName,\n        password: userInfo.loginPassword\n      })\n    })\n      .then(res => {\n        if (res.status === 401) throw new Error(res.status);\n        else return res.json();\n      })\n      .then(res => {\n        localStorage.setItem(\"token\", res.jwt);\n        localStorage.setItem(\"full_name\", res.user.full_name);\n        localStorage.setItem(\"id\", res.user.id);\n        localStorage.setItem(\"mod_id\", res.user.mod_id);\n        this.setState({\n          isUserLoggedIn: true,\n          token: localStorage.getItem(\"token\"),\n          currentUser: {\n            id: res.user.id,\n            full_name: res.user.full_name,\n            password: \"\",\n            mod_id: res.user.mod_id\n          }\n        });\n      })\n      .catch(error => {\n        this.props.history.push(\"/login\");\n        alert(`HTTP ERROR: ${error}, Unknown account or password!`);\n      });\n  };\n\n  logout = () => {\n    //need to remove local storage token\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"id\");\n    localStorage.removeItem(\"full_name\");\n    localStorage.removeItem(\"mod_id\");\n    localStorage.removeItem(\"users\");\n\n    this.setState({\n      currentUser: {\n        id: 0,\n        full_name: \"\",\n        mod_id: 0\n      },\n      isUserLoggedIn: false,\n      token: \"\"\n    });\n\n    this.props.history.push(\"/home\");\n  };\n\n  deleteHandler(id) {\n    const posts = [...this.state.posts].filter(post => post.id !== id);\n    this.setState({ posts });\n  }\n\n  editPostHandler = (id, content) => {\n    fetch(`https://welcome-board-backend.herokuapp.com/api/v1/posts/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: this.state.token\n      },\n      body: JSON.stringify({\n        content\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        let newArr = [...this.state.posts];\n        newArr = newArr.map(post => {\n          if (post.id === id) {\n            return data;\n          } else {\n            return post;\n          }\n        });\n        this.setState({ posts: newArr });\n      });\n  };\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}