{"version":3,"sources":["components/Ruby_Logo.png","components/Ruby_On_Rails_Logo.png","components/javascript-logo.png","components/react-logo-1000-transparent.png","components/redux_logo.png","components/postit_note.png","components/NavBar.js","components/MainPage.js","components/EditPostForm.js","components/PostIt.js","components/NewPostForm.js","components/ModShowPage.js","components/EditProfileForm.js","components/LoginForm.js","components/SignUpForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","className","react","Link","to","this","props","currentPath","isUserLoggedIn","onClick","logout","Component","ModsContainer","Fragment","id","Grid","Row","columns","Column","alt","src","require","React","EditPostForm","state","input","_this","post","content","alert_error","changeHandler","e","setState","target","value","handleSubmit","preventDefault","length","editPostHandler","onSubmit","cols","rows","maxLength","placeholder","onChange","author","type","PostIt","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","markedForDeletion","likes","_this2","fetch","then","resp","json","postLikes","filter","like","post_id","users","find","user","user_id","full_name","parseInt","localStorage","getItem","deleteHandler","bind","components_EditPostForm","role","aria-label","likesHandler","method","headers","Content-Type","Accept","Authorization","body","JSON","stringify","currentUser","concat","withRouter","NewPostForm","alert_error_mod_id","handleChange","mod_id","addPost","history","push","ModShowPage","mod_posts","showPostArray","posts","postArray","reverse","map","key","components_PostIt","show","display","style","components_NewPostForm","EditProfileForm","password","submitHandler","assertThisInitialized","htmlFor","name","getMods","Redirect","mods","mod","rank","updateHandler","reset","event","defineProperty","LoginForm","loginFullName","loginPassword","submitLoginHandler","removeItem","Route","path","render","SignUpForm","submitSignUpHandler","App","addNewPost","res","data","newArr","toConsumableArray","userInfo","createUser","status","Error","setItem","jwt","token","catch","error","getUser","current_mod","clear","_this3","components_NavBar","location","pathname","Switch","component","MainPage","RouterProps","components_ModShowPage","match","params","parse","components_EditProfileForm","components_LoginForm","components_SignUpForm","_this4","Boolean","window","hostname","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ac4cc65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Ruby_Logo.3faf7fef.png\";","module.exports = __webpack_public_path__ + \"static/media/Ruby_On_Rails_Logo.6cb79cc5.png\";","module.exports = __webpack_public_path__ + \"static/media/javascript-logo.80cdee08.png\";","module.exports = __webpack_public_path__ + \"static/media/react-logo-1000-transparent.96656bb8.png\";","module.exports = __webpack_public_path__ + \"static/media/redux_logo.ffca3fad.png\";","module.exports = __webpack_public_path__ + \"static/media/postit_note.15bc09a3.png\";","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <div className=\"ui menu navBar\">\n        <Fragment>\n          <Link to={\"/home\"} className=\"item\">\n            Welcome Board\n          </Link>\n          {this.props.currentPath === \"/home\" ? null : (\n            <Fragment>\n              <Link to={\"/mod/1\"} className=\"item\">\n                Mod 1\n              </Link>\n              <Link to={\"/mod/2\"} className=\"item\">\n                Mod 2\n              </Link>\n              <Link to={\"/mod/3\"} className=\"item\">\n                Mod 3\n              </Link>\n              <Link to={\"/mod/4\"} className=\"item\">\n                Mod 4\n              </Link>\n              <Link to={\"/mod/5\"} className=\"item\">\n                Mod 5\n              </Link>\n            </Fragment>\n          )}\n        </Fragment>\n        {this.props.isUserLoggedIn ? (\n          <span className=\"ui menu navright\">\n            <Link to={\"/editProfile\"} className=\"item\">\n              Edit Profile\n            </Link>\n            <span className=\"item pointer\" onClick={this.props.logout}>\n              Logout\n            </span>\n          </span>\n        ) : (\n          <span className=\"ui menu navright\">\n            <Link to={\"/login\"} className=\"item\">\n              Login\n            </Link>\n            <Link to={\"/signup\"} className=\"item\">\n              SignUp\n            </Link>\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\n\nclass ModsContainer extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        {\" \"}\n        <h1 id=\"welcome\">\n          <span>W</span>\n          <span>e</span>\n          <span>l</span>\n          <span>c</span>\n          <span>o</span>\n          <span>m</span>\n          <span>e</span>\n          <span>!</span>\n        </h1>\n        <Grid>\n          <Grid.Row columns={3}>\n            <Grid.Column>\n              <div className=\"mod-link-parent\">\n                <h1 className=\"mod-title\">Mod 1</h1>\n                <Link to={\"/mod/1\"} className=\"mod-link\">\n                  <img\n                    className=\"logo-image\"\n                    alt=\"\"\n                    src={require(\"../components/Ruby_Logo.png\")}\n                  />\n                </Link>\n              </div>\n            </Grid.Column>\n            <Grid.Column>\n              <div className=\"mod-link-parent\">\n                <h1 className=\"mod-title\">Mod 2</h1>\n                <Link to={\"/mod/2\"} className=\"mod-link\">\n                  <img\n                    className=\"logo-image\"\n                    alt=\"\"\n                    src={require(\"../components/Ruby_On_Rails_Logo.png\")}\n                  />\n                </Link>\n              </div>\n            </Grid.Column>\n            <Grid.Column>\n              <div className=\"mod-link-parent\">\n                <h1 className=\"mod-title\">Mod 3</h1>\n                <Link to={\"/mod/3\"} className=\"mod-link\">\n                  <img\n                    className=\"logo-image\"\n                    alt=\"\"\n                    src={require(\"../components/javascript-logo.png\")}\n                  />\n                </Link>\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n\n          <Grid.Row columns={3}>\n            <Grid.Column>\n              <div className=\"mod-link-parent\">\n                <h1 className=\"mod-title\">Mod 4</h1>\n                <Link to={\"/mod/4\"} className=\"mod-link\">\n                  <img\n                    className=\"logo-image\"\n                    alt=\"\"\n                    src={require(\"../components/react-logo-1000-transparent.png\")}\n                  />\n                </Link>\n              </div>\n            </Grid.Column>\n            <Grid.Column>\n              <div className=\"mod-link-parent\">\n                <h1 className=\"mod-title\">Mod 5</h1>\n                <Link to={\"/mod/5\"} className=\"mod-link\">\n                  <img\n                    className=\"logo-image\"\n                    alt=\"\"\n                    src={require(\"../components/redux_logo.png\")}\n                  />\n                </Link>\n              </div>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ModsContainer;\n","import React, { Component } from \"react\";\n\nclass EditPostForm extends Component {\n  state = {\n    input: this.props.post.content,\n    alert_error: false\n  };\n\n  changeHandler = e => {\n    this.setState({ input: e.target.value, alert_error: false });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.input.length > 0) {\n      this.props.editPostHandler(this.props.post.id, this.state.input);\n    } else {\n      this.setState({ alert_error: true });\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"postit-form\" className=\"ui\">\n        <form onSubmit={this.handleSubmit}>\n          <textarea\n            id=\"postit-input\"\n            cols=\"30\"\n            rows=\"8\"\n            maxLength=\"140\"\n            placeholder=\"Edit post\"\n            value={this.state.input}\n            onChange={this.changeHandler}\n          />\n          <p>\n            <span className=\"author\">- {this.props.author}</span>\n          </p>\n          \n          <input\n            id=\"postit-submit\"\n            className=\"pointer\"\n            type=\"submit\"\n            value=\"Update\"\n          />\n        </form>\n        <span id=\"edit-postit-alert-error\">{this.state.alert_error ? \n            \"No blank comment please.\"\n           : null}</span>\n      </div>\n    );\n  }\n}\n\nexport default EditPostForm;\n","import React from \"react\";\nimport EditPostForm from \"./EditPostForm\";\nimport { withRouter } from \"react-router-dom\";\n\nclass PostIt extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      markedForDeletion: false,\n      likes: \"\",\n      author: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\")\n      .then(resp => resp.json())\n      .then(likes => {\n        const postLikes = likes.filter(\n          like => like.post_id === this.props.post.id\n        ).length;\n        this.setState({ likes: postLikes });\n      });\n\n    // saving users collection to localStorage if in case of page reload\n    // localStorage.setItem(\"users\", JSON.stringify(this.props.users));\n\n    const author = this.props.users.find(\n      user => user.id === this.props.post.user_id\n    ).full_name;\n    // const author = this.props.users.find(\n    //   user => user.id === this.props.post.user_id\n    // ).full_name;\n\n    // const author =\n    //   this.props.users.find(user => user.id === this.props.post.user_id) ===\n    //   undefined\n    //     ? \"\"\n    //     : this.props.users.find(user => user.id === this.props.post.user_id)\n    //         .full_name;\n\n    this.setState({\n      author\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"post-wrapper\">\n        <img alt=\"\" src={require(\"./postit_note.png\")} />\n        <div className=\"post-content\">\n          {this.props.post.user_id === parseInt(localStorage.getItem(\"id\")) || parseInt(localStorage.getItem(\"id\")) === 10 ? (\n            <span\n              className=\"delete pointer\"\n              onClick={this.deleteHandler.bind(this)}\n            >\n              x\n            </span>\n          ) : null}\n\n          {this.props.post.user_id === parseInt(localStorage.getItem(\"id\")) ? (\n            <EditPostForm\n              post={this.props.post}\n              editPostHandler={this.props.editPostHandler}\n              author={this.state.author}\n            />\n          ) : (\n            <p>\n              {this.props.post.content}{\" \"}\n              <span className=\"author\">- {this.state.author}</span>\n            </p>\n          )}\n          <div className=\"likes\">\n            <span>{this.state.likes} </span>\n            <span\n              role=\"img\"\n              aria-label=\"emoji\"\n              className={this.props.isUserLoggedIn ? \"pointer\" : \"\"}\n              onClick={\n                this.props.isUserLoggedIn ? this.likesHandler.bind(this) : null\n              }\n            >\n              😎\n            </span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  likesHandler() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        post_id: this.props.post.id,\n        user_id: this.props.currentUser.id\n      })\n    }).then(this.setState({ likes: this.state.likes + 1 }));\n  }\n\n  editPostHandler = e => {\n    e.preventDefault();\n    this.props.editPostHandler();\n  };\n\n  deleteHandler() {\n    // this.setState({ markedForDeletion: true });\n    fetch(\n      `https://welcome-board-backend.herokuapp.com/api/v1/posts/${\n        this.props.post.id\n      }`,\n      {\n        method: \"DELETE\",\n        headers: {\n          Authorization: localStorage.getItem(\"token\")\n        }\n      }\n    );\n    this.props.deleteHandler(this.props.post.id);\n  }\n}\n\nexport default withRouter(PostIt);\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass NewPostForm extends Component {\n  state = {\n    input: \"\",\n    alert_error: false,\n    alert_error_mod_id: false\n  };\n\n  handleChange = e => {\n    this.setState({ input: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.state.input !== \"\") {\n      if (this.props.currentUser.mod_id > this.props.mod_id) {\n        this.props.addPost(this.state.input, this.props.mod_id);\n      } else {\n        this.setState({ alert_error_mod_id: true });\n      }\n\n      this.setState({\n        input: \"\",\n        alert_error: false\n      });\n    } else {\n      {\n        this.setState({ alert_error: true });\n      }\n      this.props.history.push(`/mod/${this.props.mod_id}`);\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"new-post-form\" className=\"ui card form\">\n        <form onSubmit={this.handleSubmit}>\n          Write a note to a previous mod.\n          <br />\n          <textarea\n            className=\"form-control\"\n            type=\"text\"\n            placeholder=\"Enter note\"\n            cols=\"120\"\n            rows=\"8\"\n            maxLength=\"140\"\n            value={this.state.input}\n            onChange={this.handleChange}\n          />\n          <p>Remaining Characters: {140 - this.state.input.length}</p>\n          {this.state.alert_error ? (\n            <span className=\"alert-error\">No blank comment please.</span>\n          ) : null}\n          {this.state.alert_error_mod_id ? (\n            <span className=\"alert-error\">\n              You cannot post to mods that you are not in or have not completed.\n            </span>\n          ) : null}\n          <input className=\"submit button pointer\" type=\"submit\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NewPostForm);\n","import React, { Component } from \"react\";\nimport PostIt from \"./PostIt\";\nimport NewPostForm from \"./NewPostForm\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ModShowPage extends Component {\n  state = {\n    mod_posts: this.props.mod_id\n  };\n\n  showPostArray = () => {\n    let posts = this.props.postArray\n      .filter(post => {\n        return post.mod_id === parseInt(this.props.mod_id);\n      })\n      .reverse();\n\n    return (\n      <div className=\"post-array-container\">\n        {posts.map(post => {\n          return (\n            <div key={post.id} className=\"content-wrapper\">\n              <PostIt\n                post={post}\n                currentUser={this.props.currentUser}\n                deleteHandler={this.props.deleteHandler}\n                editPostHandler={this.props.editPostHandler}\n                likes={this.props.likes}\n                isUserLoggedIn={this.props.isUserLoggedIn}\n                users={this.props.users}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  render() {\n    const show = { display: this.props.isUserLoggedIn ? \"block\" : \"none\" };\n    return (\n      <div className=\"ui\">\n        <h1 className=\"mod-name\">Welcome to {`Mod ${this.props.mod_id}`}</h1>\n        <div className=\"post-container\">{this.showPostArray()}</div>\n        <div style={show}>\n          <NewPostForm\n            addPost={this.props.addPost}\n            mod_id={this.props.mod_id}\n            currentUser={this.props.currentUser}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ModShowPage);\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nclass EditProfileForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: this.props.currentUser.id,\n      full_name: this.props.currentUser.full_name,\n      password: \"\",\n      mod_id: this.props.currentUser.mod_id,\n      alert_error: false\n    };\n\n    this.submitHandler = this.submitHandler.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n  }\n\n  render() {\n    return (\n      <div id=\"edit-profile-form\" className=\"ui card form\">\n        {this.props.isUserLoggedIn ? (\n          <form onSubmit={this.submitHandler}>\n            <label htmlFor=\"full_name\">Full Name: </label>\n            <input\n              type=\"text\"\n              name=\"full_name\"\n              onChange={this.changeHandler}\n              value={this.state.full_name}\n            />\n            <label htmlFor=\"password\">Password: </label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"type new password\"\n              id=\"password\"\n              value={this.state.password}\n              onChange={this.changeHandler}\n            />\n            <label htmlFor=\"mod\">Mod #: </label>\n            <select\n              name=\"mod_id\"\n              id=\"mod_id\"\n              onChange={this.changeHandler}\n              value={this.state.mod_id}\n            >\n              {this.getMods()}\n            </select>\n\n            {this.state.alert_error ? <span className=\"alert-error\">Full name and password field cannot be empty. Mod ID should not be lower than your current mod.</span> : null}\n\n            <input\n              type=\"submit\"\n              className=\"submit button pointer\"\n              value=\"Update\"\n            />\n          </form>\n        ) : (\n          <Redirect to=\"/login\" />\n        )}\n      </div>\n    );\n  }\n\n  getMods() {\n    return this.props.mods.map(mod => (\n      <option key={mod.id} value={mod.id}>\n        {mod.rank}\n      </option>\n    ));\n  }\n\n  submitHandler(e) {\n    e.preventDefault();\n    if (\n      this.state.full_name !== \"\" &&\n      this.state.password !== \"\" &&\n      this.state.mod_id >= this.props.currentUser.mod_id\n    ) {\n      this.props.updateHandler(this.state);\n      e.target.reset();\n    } else {\n      this.setState({ alert_error: true });\n    }\n  }\n\n  changeHandler(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n}\n\nexport default EditProfileForm;\n","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nclass LoginForm extends Component {\n  state = {\n    loginFullName: \"\",\n    loginPassword: \"\",\n    alert_error: false\n  };\n\n  componentWillUnmount() {\n    localStorage.removeItem(\"loginError\");\n  }\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  submitLoginHandler = event => {\n    event.preventDefault();\n\n    if (this.state.loginFullName !== \"\" && this.state.loginPassword !== \"\") {\n      this.props.submitLoginHandler(this.state, event);\n      this.setState({\n        loginFullName: \"\",\n        loginPassword: \"\"\n      });\n    } else {\n      this.setState({ alert_error: true });\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"login-form\" className=\"ui card form\">\n        <h2>Login</h2>\n        <Route\n          path=\"/login\"\n          render={() => {\n            return (\n              <div>\n                <form onSubmit={this.submitLoginHandler}>\n                  <label htmlFor=\"full-name\">Full Name:</label>\n                  <input\n                    id=\"full-name\"\n                    className=\"form-control\"\n                    name=\"loginFullName\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={this.state.loginFullName}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"password\">Password:</label>\n                  <input\n                    id=\"password\"\n                    className=\"form-control\"\n                    name=\"loginPassword\"\n                    type=\"password\"\n                    placeholder=\"Enter a password\"\n                    value={this.state.loginPassword}\n                    onChange={this.changeHandler}\n                  />\n\n                  {this.state.alert_error ? (\n                    <span className=\"alert-error\">\n                      Full name and password field cannot be empty.\n                    </span>\n                  ) : null}\n                  <span className=\"alert-error\">\n                    {localStorage.getItem(\"loginError\") !== \"\"\n                      ? localStorage.getItem(\"loginError\")\n                      : null}\n                  </span>\n                  <input\n                    type=\"submit\"\n                    className=\"submit button pointer\"\n                    value=\"Submit\"\n                  />\n                </form>\n              </div>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React, { Component } from \"react\";\nimport { Route, withRouter } from \"react-router-dom\";\n\nclass SignUpForm extends Component {\n  state = {\n    full_name: \"\",\n    password: \"\",\n    mod_id: 1,\n    alert_error: false\n  };\n\n  componentWillUnmount() {\n    localStorage.removeItem(\"signupError\");\n  }\n\n  render() {\n    return (\n      <div id=\"signup-form\" className=\"ui card form\">\n        <h2>Sign Up</h2>\n        <Route\n          path=\"/signup\"\n          render={() => {\n            return (\n              <div>\n                <form onSubmit={this.submitSignUpHandler}>\n                  <label htmlFor=\"full-name\">Full Name:</label>\n                  <input\n                    id=\"full-name\"\n                    className=\"form-control\"\n                    name=\"full_name\"\n                    type=\"text\"\n                    placeholder=\"Enter your full name\"\n                    value={this.state.full_name}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"password\">Password:</label>\n                  <input\n                    id=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter a password\"\n                    value={this.state.password}\n                    onChange={this.changeHandler}\n                  />\n                  <br />\n                  <label htmlFor=\"mod\">Mod:</label>\n                  <select\n                    id=\"mod\"\n                    className=\"form-control\"\n                    name=\"mod_id\"\n                    value={this.state.mod_id}\n                    onChange={this.changeHandler}\n                  >\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\">5</option>\n                  </select>\n                  {this.state.alert_error ? (\n                    <span className=\"alert-error\">\n                      Full name and password field cannot be empty.\n                    </span>\n                  ) : null}\n                  <span className=\"alert-error\">\n                    {localStorage.getItem(\"signupError\") !== \"\"\n                      ? localStorage.getItem(\"signupError\")\n                      : null}\n                  </span>\n                  <input\n                    type=\"submit\"\n                    className=\"submit button\"\n                    value=\"Submit\"\n                  />\n                </form>\n              </div>\n            );\n          }}\n        />\n      </div>\n    );\n  }\n\n  changeHandler = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  submitSignUpHandler = event => {\n    event.preventDefault();\n\n    if (this.state.full_name !== \"\" && this.state.password !== \"\") {\n      this.props.submitSignUpHandler(this.state, event);\n      this.setState({\n        full_name: \"\",\n        password: \"\",\n        mod_id: 1\n      });\n    } else {\n      this.setState({ alert_error: true });\n      // this.props.history.push(\"/signup\");\n    }\n  };\n}\n\nexport default withRouter(SignUpForm);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport MainPage from \"./components/MainPage\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport ModShowPage from \"./components/ModShowPage\";\nimport EditProfileForm from \"./components/EditProfileForm\";\nimport LoginForm from \"./components/LoginForm\";\nimport SignUpForm from \"./components/SignUpForm\";\n// import StatsDiv from './components/StatsDiv';          will delay this component for later\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // alert_error: false,\n      isUserLoggedIn: false,\n      current_mod: 0,\n      // please do not change the snake case\n      currentUser: {\n        id: 0,\n        full_name: \"\",\n        // password: \"\",\n        mod_id: 0\n      },\n      mods: [],\n      posts: [],\n      // users: [],\n      likes: [],\n      token: \"\"\n    };\n\n    this.updateHandler = this.updateHandler.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/mods\")\n      .then(resp => resp.json())\n      .then(mods => this.setState({ mods }));\n\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/users\")\n      .then(resp => resp.json())\n      .then(users => {\n        localStorage.setItem(\"users\", JSON.stringify(users));\n        // this.setState({ users })\n      });\n\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/posts\")\n      .then(resp => resp.json())\n      .then(posts => {\n        this.setState({ posts });\n      });\n\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/likes\")\n      .then(resp => resp.json())\n      .then(likes => {\n        this.setState({ likes });\n      });\n\n    // Commented by Carlo: will comment this block of code because the code is not doing anything and\n    // the state will default back to false if the page is reloaded\n    // which will make the block of code below useless.\n    // if (this.state.isUserLoggedIn) {\n    //   let token = localStorage.getItem(\"token\");\n    //   fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/current_user\", {\n    //     method: \"GET\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       Action: \"application/json\",\n    //       Authorization: `${token}`\n    //     }\n    //   });\n    // }\n\n    if (localStorage.getItem(\"token\") !== null) {\n      this.setState({\n        currentUser: {\n          id: parseInt(localStorage.getItem(\"id\")),\n          full_name: localStorage.getItem(\"full_name\"),\n          mod_id: parseInt(localStorage.getItem(\"mod_id\"))\n        },\n        token: localStorage.getItem(\"token\"),\n        isUserLoggedIn: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    localStorage.clear();\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          isUserLoggedIn={this.state.isUserLoggedIn}\n          logout={this.logout}\n          currentPath={this.props.location.pathname}\n        />\n\n        <Switch>\n          <Route path=\"/home\" component={MainPage} />\n          <Route\n            path=\"/mod/:id\"\n            render={RouterProps => {\n              return (\n                <ModShowPage\n                  mod_id={RouterProps.match.params.id}\n                  postArray={this.state.posts}\n                  addPost={this.addNewPost}\n                  isUserLoggedIn={this.state.isUserLoggedIn}\n                  currentUser={this.state.currentUser}\n                  deleteHandler={this.deleteHandler.bind(this)}\n                  editPostHandler={this.editPostHandler}\n                  likes={this.state.likes}\n                  users={JSON.parse(localStorage.getItem(\"users\"))}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/editProfile\"\n            render={() => {\n              return (\n                <EditProfileForm\n                  isUserLoggedIn={this.state.isUserLoggedIn}\n                  currentUser={this.state.currentUser}\n                  updateHandler={this.updateHandler}\n                  mods={this.state.mods}\n                />\n              );\n            }}\n          />\n          <Route\n            path=\"/login\"\n            render={() => {\n              return <LoginForm submitLoginHandler={this.submitLoginHandler} />;\n            }}\n          />\n          <Route\n            path=\"/signUp\"\n            render={() => {\n              return (\n                <SignUpForm submitSignUpHandler={this.submitSignUpHandler} />\n              );\n            }}\n          />\n          <Route path=\"/\" component={MainPage} />\n        </Switch>\n\n        {/* {<StatsDiv />} */}\n      </div>\n    );\n  }\n\n  addNewPost = (input, mod) => {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/posts\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: localStorage.getItem(\"token\")\n      },\n      body: JSON.stringify({\n        content: input,\n        mod_id: parseInt(mod),\n        user_id: parseInt(localStorage.getItem(\"id\"))\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        let newArr = [...this.state.posts];\n        newArr.push(data);\n        this.setState({ posts: newArr });\n      });\n  };\n\n  updateHandler(currentUser) {\n    this.setState({ currentUser });\n\n    fetch(\n      `https://welcome-board-backend.herokuapp.com/api/v1/users/${\n        currentUser.id\n      }`,\n      {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: this.state.token\n        },\n        body: JSON.stringify({\n          full_name: currentUser.full_name,\n          password: currentUser.password,\n          mod_id: currentUser.mod_id\n        })\n      }\n    )\n      .then(resp => resp.json())\n      .then(user => {\n        this.setState({\n          currentUser: {\n            id: user.id,\n            full_name: user.full_name,\n            mod_id: user.mod_id\n          }\n        });\n        this.props.history.push(\"/home\");\n      });\n  }\n\n  submitSignUpHandler = (userInfo, event) => {\n    event.preventDefault();\n    this.createUser(userInfo);\n    this.props.history.push(\"/home\");\n  };\n\n  createUser = userInfo => {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/users\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        full_name: userInfo.full_name,\n        password: userInfo.password,\n        mod_id: userInfo.mod_id\n      })\n    })\n      .then(res => {\n        if (res.status === 406) throw new Error(res.status);\n        else return res.json();\n      })\n      .then(res => {\n        localStorage.setItem(\"token\", res.jwt);\n        this.setState({\n          isUserLoggedIn: true,\n          token: localStorage.getItem(\"token\"),\n          currentUser: {\n            id: res.user.id,\n            full_name: res.user.full_name,\n            password: \"\",\n            mod_id: res.user.mod_id\n          }\n        });\n      })\n      .catch(error => {\n        localStorage.setItem(\"signupError\", \"Duplicate account\");\n        this.props.history.push(\"/signup\");\n      });\n  };\n\n  submitLoginHandler = (userInfo, event) => {\n    event.preventDefault();\n    this.getUser(userInfo);\n    this.props.history.push(\"/home\");\n  };\n\n  getUser = userInfo => {\n    fetch(\"https://welcome-board-backend.herokuapp.com/api/v1/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        full_name: userInfo.loginFullName,\n        password: userInfo.loginPassword\n      })\n    })\n      .then(res => {\n        if (res.status === 401) throw new Error(res.status);\n        else return res.json();\n      })\n      // .then(res => res.json())\n      .then(res => {\n        localStorage.setItem(\"token\", res.jwt);\n        localStorage.setItem(\"full_name\", res.user.full_name);\n        localStorage.setItem(\"id\", res.user.id);\n        localStorage.setItem(\"mod_id\", res.user.mod_id);\n        this.setState({\n          isUserLoggedIn: true,\n          token: localStorage.getItem(\"token\"),\n          currentUser: {\n            id: res.user.id,\n            full_name: res.user.full_name,\n            password: \"\",\n            mod_id: res.user.mod_id\n          }\n        });\n      })\n      .catch(error => {\n        localStorage.setItem(\"loginError\", \"Invalid account/password\");\n        this.props.history.push(\"/login\");\n        // this.setState({ alert_error: true });\n        // alert(`HTTP ERROR: ${error}, Unknown account or password!`);\n      });\n  };\n\n  logout = () => {\n    //need to remove local storage token\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"id\");\n    localStorage.removeItem(\"full_name\");\n    localStorage.removeItem(\"mod_id\");\n\n    this.setState({\n      currentUser: {\n        id: 0,\n        full_name: \"\",\n        mod_id: 0\n      },\n      isUserLoggedIn: false,\n      token: \"\"\n    });\n\n    this.props.history.push(\"/home\");\n  };\n\n  deleteHandler(id) {\n    const posts = [...this.state.posts].filter(post => post.id !== id);\n    this.setState({ posts });\n  }\n\n  editPostHandler = (id, content) => {\n    fetch(`https://welcome-board-backend.herokuapp.com/api/v1/posts/${id}`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: this.state.token\n      },\n      body: JSON.stringify({\n        content\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        let newArr = [...this.state.posts];\n        newArr = newArr.map(post => {\n          if (post.id === id) {\n            return data;\n          } else {\n            return post;\n          }\n        });\n        this.setState({ posts: newArr });\n      });\n  };\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}